<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="8337"><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (2 samples, 0.02%)</title><rect x="0.0000%" y="261" width="0.0240%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="271.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (4 samples, 0.05%)</title><rect x="0.0240%" y="261" width="0.0480%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="4"/><text x="0.2740%" y="271.50"></text></g><g><title>[construct_hnsw] (51 samples, 0.61%)</title><rect x="0.0720%" y="261" width="0.6117%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="51"/><text x="0.3220%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (51 samples, 0.61%)</title><rect x="0.0720%" y="245" width="0.6117%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="51"/><text x="0.3220%" y="255.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="0.6837%" y="261" width="0.0480%" height="15" fill="rgb(208,68,35)" fg:x="57" fg:w="4"/><text x="0.9337%" y="271.50"></text></g><g><title>_ZN10rayon_core8registry12WorkerThread9find_work17h35b6ff960f4c472aE.llvm.17884549841645512444 (13 samples, 0.16%)</title><rect x="0.7317%" y="261" width="0.1559%" height="15" fill="rgb(232,128,0)" fg:x="61" fg:w="13"/><text x="0.9817%" y="271.50"></text></g><g><title>__sched_yield (16 samples, 0.19%)</title><rect x="0.8876%" y="261" width="0.1919%" height="15" fill="rgb(207,160,47)" fg:x="74" fg:w="16"/><text x="1.1376%" y="271.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (2 samples, 0.02%)</title><rect x="1.0795%" y="261" width="0.0240%" height="15" fill="rgb(228,23,34)" fg:x="90" fg:w="2"/><text x="1.3295%" y="271.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold (1 samples, 0.01%)</title><rect x="1.1035%" y="261" width="0.0120%" height="15" fill="rgb(218,30,26)" fg:x="92" fg:w="1"/><text x="1.3535%" y="271.50"></text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (2 samples, 0.02%)</title><rect x="1.1155%" y="261" width="0.0240%" height="15" fill="rgb(220,122,19)" fg:x="93" fg:w="2"/><text x="1.3655%" y="271.50"></text></g><g><title>[[heap]] (96 samples, 1.15%)</title><rect x="0.0000%" y="277" width="1.1515%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="96"/><text x="0.2500%" y="287.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (1 samples, 0.01%)</title><rect x="1.1395%" y="261" width="0.0120%" height="15" fill="rgb(240,193,28)" fg:x="95" fg:w="1"/><text x="1.3895%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="1.1515%" y="261" width="0.0120%" height="15" fill="rgb(216,20,37)" fg:x="96" fg:w="1"/><text x="1.4015%" y="271.50"></text></g><g><title>malloc (1 samples, 0.01%)</title><rect x="1.1635%" y="261" width="0.0120%" height="15" fill="rgb(206,188,39)" fg:x="97" fg:w="1"/><text x="1.4135%" y="271.50"></text></g><g><title>[[stack]] (3 samples, 0.04%)</title><rect x="1.1515%" y="277" width="0.0360%" height="15" fill="rgb(217,207,13)" fg:x="96" fg:w="3"/><text x="1.4015%" y="287.50"></text></g><g><title>vecnn::hnsw::Hnsw::new (1 samples, 0.01%)</title><rect x="1.1755%" y="261" width="0.0120%" height="15" fill="rgb(231,73,38)" fg:x="98" fg:w="1"/><text x="1.4255%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 0.16%)</title><rect x="1.1875%" y="261" width="0.1559%" height="15" fill="rgb(225,20,46)" fg:x="99" fg:w="13"/><text x="1.4375%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="1.3434%" y="261" width="0.0120%" height="15" fill="rgb(210,31,41)" fg:x="112" fg:w="1"/><text x="1.5934%" y="271.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (6 samples, 0.07%)</title><rect x="1.3554%" y="261" width="0.0720%" height="15" fill="rgb(221,200,47)" fg:x="113" fg:w="6"/><text x="1.6054%" y="271.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (110 samples, 1.32%)</title><rect x="1.4274%" y="261" width="1.3194%" height="15" fill="rgb(226,26,5)" fg:x="119" fg:w="110"/><text x="1.6774%" y="271.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (4 samples, 0.05%)</title><rect x="2.7468%" y="261" width="0.0480%" height="15" fill="rgb(249,33,26)" fg:x="229" fg:w="4"/><text x="2.9968%" y="271.50"></text></g><g><title>crossbeam_epoch::default::with_handle (122 samples, 1.46%)</title><rect x="2.7948%" y="261" width="1.4634%" height="15" fill="rgb(235,183,28)" fg:x="233" fg:w="122"/><text x="3.0448%" y="271.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (2 samples, 0.02%)</title><rect x="4.2581%" y="261" width="0.0240%" height="15" fill="rgb(221,5,38)" fg:x="355" fg:w="2"/><text x="4.5081%" y="271.50"></text></g><g><title>malloc (2 samples, 0.02%)</title><rect x="4.2821%" y="261" width="0.0240%" height="15" fill="rgb(247,18,42)" fg:x="357" fg:w="2"/><text x="4.5321%" y="271.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (16 samples, 0.19%)</title><rect x="4.3061%" y="261" width="0.1919%" height="15" fill="rgb(241,131,45)" fg:x="359" fg:w="16"/><text x="4.5561%" y="271.50"></text></g><g><title>std::panicking::try (1 samples, 0.01%)</title><rect x="4.4980%" y="261" width="0.0120%" height="15" fill="rgb(249,31,29)" fg:x="375" fg:w="1"/><text x="4.7480%" y="271.50"></text></g><g><title>[anon] (408 samples, 4.89%)</title><rect x="1.1875%" y="277" width="4.8938%" height="15" fill="rgb(225,111,53)" fg:x="99" fg:w="408"/><text x="1.4375%" y="287.50">[anon]</text></g><g><title>std::sys::thread_local::fast_local::Key&lt;T&gt;::get (131 samples, 1.57%)</title><rect x="4.5100%" y="261" width="1.5713%" height="15" fill="rgb(238,160,17)" fg:x="376" fg:w="131"/><text x="4.7600%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.06%)</title><rect x="6.0813%" y="261" width="0.0600%" height="15" fill="rgb(214,148,48)" fg:x="507" fg:w="5"/><text x="6.3313%" y="271.50"></text></g><g><title>[construct_hnsw] (10 samples, 0.12%)</title><rect x="6.0813%" y="277" width="0.1199%" height="15" fill="rgb(232,36,49)" fg:x="507" fg:w="10"/><text x="6.3313%" y="287.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (5 samples, 0.06%)</title><rect x="6.1413%" y="261" width="0.0600%" height="15" fill="rgb(209,103,24)" fg:x="512" fg:w="5"/><text x="6.3913%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.06%)</title><rect x="6.2013%" y="277" width="0.0600%" height="15" fill="rgb(229,88,8)" fg:x="517" fg:w="5"/><text x="6.4513%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="6.2493%" y="261" width="0.0120%" height="15" fill="rgb(213,181,19)" fg:x="521" fg:w="1"/><text x="6.4993%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="6.2493%" y="245" width="0.0120%" height="15" fill="rgb(254,191,54)" fg:x="521" fg:w="1"/><text x="6.4993%" y="255.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="6.2493%" y="229" width="0.0120%" height="15" fill="rgb(241,83,37)" fg:x="521" fg:w="1"/><text x="6.4993%" y="239.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="6.2493%" y="213" width="0.0120%" height="15" fill="rgb(233,36,39)" fg:x="521" fg:w="1"/><text x="6.4993%" y="223.50"></text></g><g><title>_ZN73_$LT$rayon_core..latch..LockLatch$u20$as$u20$rayon_core..latch..Latch$GT$3set17h9f8e6039adcc5ee2E.llvm.17884549841645512444 (1 samples, 0.01%)</title><rect x="6.2852%" y="181" width="0.0120%" height="15" fill="rgb(226,3,54)" fg:x="524" fg:w="1"/><text x="6.5352%" y="191.50"></text></g><g><title>&lt;vecnn::dataset::FlatDataSet as vecnn::dataset::DatasetT&gt;::get (2 samples, 0.02%)</title><rect x="9.9676%" y="133" width="0.0240%" height="15" fill="rgb(245,192,40)" fg:x="831" fg:w="2"/><text x="10.2176%" y="143.50"></text></g><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (456 samples, 5.47%)</title><rect x="8.2644%" y="165" width="5.4696%" height="15" fill="rgb(238,167,29)" fg:x="689" fg:w="456"/><text x="8.5144%" y="175.50">&lt;rayon_..</text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (438 samples, 5.25%)</title><rect x="8.4803%" y="149" width="5.2537%" height="15" fill="rgb(232,182,51)" fg:x="707" fg:w="438"/><text x="8.7303%" y="159.50">rayon_..</text></g><g><title>&lt;vecnn::distance::SquaredDiffSum as vecnn::distance::DistanceT&gt;::distance (312 samples, 3.74%)</title><rect x="9.9916%" y="133" width="3.7424%" height="15" fill="rgb(231,60,39)" fg:x="833" fg:w="312"/><text x="10.2416%" y="143.50">&lt;vec..</text></g><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (10 samples, 0.12%)</title><rect x="13.8659%" y="117" width="0.1199%" height="15" fill="rgb(208,69,12)" fg:x="1156" fg:w="10"/><text x="14.1159%" y="127.50"></text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (10 samples, 0.12%)</title><rect x="13.8659%" y="101" width="0.1199%" height="15" fill="rgb(235,93,37)" fg:x="1156" fg:w="10"/><text x="14.1159%" y="111.50"></text></g><g><title>&lt;vecnn::distance::SquaredDiffSum as vecnn::distance::DistanceT&gt;::distance (6 samples, 0.07%)</title><rect x="13.9139%" y="85" width="0.0720%" height="15" fill="rgb(213,116,39)" fg:x="1160" fg:w="6"/><text x="14.1639%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 0.14%)</title><rect x="13.9858%" y="101" width="0.1439%" height="15" fill="rgb(222,207,29)" fg:x="1166" fg:w="12"/><text x="14.2358%" y="111.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (11 samples, 0.13%)</title><rect x="13.9978%" y="85" width="0.1319%" height="15" fill="rgb(206,96,30)" fg:x="1167" fg:w="11"/><text x="14.2478%" y="95.50"></text></g><g><title>crossbeam_epoch::default::with_handle (10 samples, 0.12%)</title><rect x="14.0098%" y="69" width="0.1199%" height="15" fill="rgb(218,138,4)" fg:x="1168" fg:w="10"/><text x="14.2598%" y="79.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (2 samples, 0.02%)</title><rect x="14.1058%" y="53" width="0.0240%" height="15" fill="rgb(250,191,14)" fg:x="1176" fg:w="2"/><text x="14.3558%" y="63.50"></text></g><g><title>_ZN15crossbeam_epoch8internal6Global11try_advance17h67ce1b2da7b97f59E.llvm.16816591023456506003 (2 samples, 0.02%)</title><rect x="14.1058%" y="37" width="0.0240%" height="15" fill="rgb(239,60,40)" fg:x="1176" fg:w="2"/><text x="14.3558%" y="47.50"></text></g><g><title>_ZN10rayon_core8registry12WorkerThread9find_work17h35b6ff960f4c472aE.llvm.17884549841645512444 (13 samples, 0.16%)</title><rect x="13.9858%" y="117" width="0.1559%" height="15" fill="rgb(206,27,48)" fg:x="1166" fg:w="13"/><text x="14.2358%" y="127.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (1 samples, 0.01%)</title><rect x="14.1298%" y="101" width="0.0120%" height="15" fill="rgb(225,35,8)" fg:x="1178" fg:w="1"/><text x="14.3798%" y="111.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="14.1418%" y="117" width="0.0120%" height="15" fill="rgb(250,213,24)" fg:x="1179" fg:w="1"/><text x="14.3918%" y="127.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (3 samples, 0.04%)</title><rect x="14.1538%" y="117" width="0.0360%" height="15" fill="rgb(247,123,22)" fg:x="1180" fg:w="3"/><text x="14.4038%" y="127.50"></text></g><g><title>crossbeam_epoch::default::with_handle (3 samples, 0.04%)</title><rect x="14.1538%" y="101" width="0.0360%" height="15" fill="rgb(231,138,38)" fg:x="1180" fg:w="3"/><text x="14.4038%" y="111.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (13 samples, 0.16%)</title><rect x="14.1898%" y="117" width="0.1559%" height="15" fill="rgb(231,145,46)" fg:x="1183" fg:w="13"/><text x="14.4398%" y="127.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (47 samples, 0.56%)</title><rect x="13.7939%" y="133" width="0.5638%" height="15" fill="rgb(251,118,11)" fg:x="1150" fg:w="47"/><text x="14.0439%" y="143.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (1 samples, 0.01%)</title><rect x="14.3457%" y="117" width="0.0120%" height="15" fill="rgb(217,147,25)" fg:x="1196" fg:w="1"/><text x="14.5957%" y="127.50"></text></g><g><title>_ZN10rayon_core5sleep5Sleep20wake_specific_thread17h0649d60e857e4de1E.llvm.15331521411842462451 (1 samples, 0.01%)</title><rect x="14.3457%" y="101" width="0.0120%" height="15" fill="rgb(247,81,37)" fg:x="1196" fg:w="1"/><text x="14.5957%" y="111.50"></text></g><g><title>rayon_core::scope::Scope::new (4 samples, 0.05%)</title><rect x="14.3577%" y="133" width="0.0480%" height="15" fill="rgb(209,12,38)" fg:x="1197" fg:w="4"/><text x="14.6077%" y="143.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="15.4372%" y="101" width="0.0240%" height="15" fill="rgb(227,1,9)" fg:x="1287" fg:w="2"/><text x="15.6872%" y="111.50"></text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="15.4612%" y="101" width="0.0240%" height="15" fill="rgb(248,47,43)" fg:x="1289" fg:w="2"/><text x="15.7112%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (51 samples, 0.61%)</title><rect x="15.4852%" y="101" width="0.6117%" height="15" fill="rgb(221,10,30)" fg:x="1291" fg:w="51"/><text x="15.7352%" y="111.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (14 samples, 0.17%)</title><rect x="15.9290%" y="85" width="0.1679%" height="15" fill="rgb(210,229,1)" fg:x="1328" fg:w="14"/><text x="16.1790%" y="95.50"></text></g><g><title>malloc (52 samples, 0.62%)</title><rect x="16.0969%" y="101" width="0.6237%" height="15" fill="rgb(222,148,37)" fg:x="1342" fg:w="52"/><text x="16.3469%" y="111.50"></text></g><g><title>[libc.so.6] (37 samples, 0.44%)</title><rect x="16.2768%" y="85" width="0.4438%" height="15" fill="rgb(234,67,33)" fg:x="1357" fg:w="37"/><text x="16.5268%" y="95.50"></text></g><g><title>rayon_core::registry::Registry::inject_or_push (130 samples, 1.56%)</title><rect x="16.7206%" y="101" width="1.5593%" height="15" fill="rgb(247,98,35)" fg:x="1394" fg:w="130"/><text x="16.9706%" y="111.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (17 samples, 0.20%)</title><rect x="18.3999%" y="69" width="0.2039%" height="15" fill="rgb(247,138,52)" fg:x="1534" fg:w="17"/><text x="18.6499%" y="79.50"></text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (351 samples, 4.21%)</title><rect x="14.4057%" y="133" width="4.2101%" height="15" fill="rgb(213,79,30)" fg:x="1201" fg:w="351"/><text x="14.6557%" y="143.50">rayon..</text></g><g><title>std::panicking::try (346 samples, 4.15%)</title><rect x="14.4656%" y="117" width="4.1502%" height="15" fill="rgb(246,177,23)" fg:x="1206" fg:w="346"/><text x="14.7156%" y="127.50">std::..</text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (28 samples, 0.34%)</title><rect x="18.2800%" y="101" width="0.3359%" height="15" fill="rgb(230,62,27)" fg:x="1524" fg:w="28"/><text x="18.5300%" y="111.50"></text></g><g><title>_ZN10rayon_core5sleep5Sleep20wake_specific_thread17h0649d60e857e4de1E.llvm.15331521411842462451 (28 samples, 0.34%)</title><rect x="18.2800%" y="85" width="0.3359%" height="15" fill="rgb(216,154,8)" fg:x="1524" fg:w="28"/><text x="18.5300%" y="95.50"></text></g><g><title>syscall (1 samples, 0.01%)</title><rect x="18.6038%" y="69" width="0.0120%" height="15" fill="rgb(244,35,45)" fg:x="1551" fg:w="1"/><text x="18.8538%" y="79.50"></text></g><g><title>_ZN10rayon_core5scope5scope28_$u7b$$u7b$closure$u7d$$u7d$17hc7eb047addf975f9E.llvm.5196722028160639995 (406 samples, 4.87%)</title><rect x="13.7579%" y="149" width="4.8699%" height="15" fill="rgb(251,115,12)" fg:x="1147" fg:w="406"/><text x="14.0079%" y="159.50">_ZN10r..</text></g><g><title>rayon_core::scope::ScopeBase::maybe_propagate_panic (1 samples, 0.01%)</title><rect x="18.6158%" y="133" width="0.0120%" height="15" fill="rgb(240,54,50)" fg:x="1552" fg:w="1"/><text x="18.8658%" y="143.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (3 samples, 0.04%)</title><rect x="18.6278%" y="133" width="0.0360%" height="15" fill="rgb(233,84,52)" fg:x="1553" fg:w="3"/><text x="18.8778%" y="143.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (414 samples, 4.97%)</title><rect x="13.7340%" y="165" width="4.9658%" height="15" fill="rgb(207,117,47)" fg:x="1145" fg:w="414"/><text x="13.9840%" y="175.50">&lt;rayon..</text></g><g><title>_ZN73_$LT$rayon_core..latch..LockLatch$u20$as$u20$rayon_core..latch..Latch$GT$3set17h9f8e6039adcc5ee2E.llvm.2626077692067181508 (6 samples, 0.07%)</title><rect x="18.6278%" y="149" width="0.0720%" height="15" fill="rgb(249,43,39)" fg:x="1553" fg:w="6"/><text x="18.8778%" y="159.50"></text></g><g><title>syscall (3 samples, 0.04%)</title><rect x="18.6638%" y="133" width="0.0360%" height="15" fill="rgb(209,38,44)" fg:x="1556" fg:w="3"/><text x="18.9138%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="18.6878%" y="117" width="0.0120%" height="15" fill="rgb(236,212,23)" fg:x="1558" fg:w="1"/><text x="18.9378%" y="127.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (382 samples, 4.58%)</title><rect x="71.9563%" y="101" width="4.5820%" height="15" fill="rgb(242,79,21)" fg:x="5999" fg:w="382"/><text x="72.2063%" y="111.50">cross..</text></g><g><title>_ZN15crossbeam_epoch8internal6Global11try_advance17h67ce1b2da7b97f59E.llvm.16816591023456506003 (379 samples, 4.55%)</title><rect x="71.9923%" y="85" width="4.5460%" height="15" fill="rgb(211,96,35)" fg:x="6002" fg:w="379"/><text x="72.2423%" y="95.50">_ZN15..</text></g><g><title>crossbeam_epoch::default::with_handle (2,804 samples, 33.63%)</title><rect x="43.6968%" y="117" width="33.6332%" height="15" fill="rgb(253,215,40)" fg:x="3643" fg:w="2804"/><text x="43.9468%" y="127.50">crossbeam_epoch::default::with_handle</text></g><g><title>std::sys::thread_local::fast_local::Key&lt;T&gt;::get (66 samples, 0.79%)</title><rect x="76.5383%" y="101" width="0.7917%" height="15" fill="rgb(211,81,21)" fg:x="6381" fg:w="66"/><text x="76.7883%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4,885 samples, 58.59%)</title><rect x="19.6114%" y="149" width="58.5942%" height="15" fill="rgb(208,190,38)" fg:x="1635" fg:w="4885"/><text x="19.8614%" y="159.50">&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (4,615 samples, 55.36%)</title><rect x="22.8499%" y="133" width="55.3556%" height="15" fill="rgb(235,213,38)" fg:x="1905" fg:w="4615"/><text x="23.0999%" y="143.50">crossbeam_deque::deque::Stealer&lt;T&gt;::steal</text></g><g><title>std::sys::thread_local::fast_local::Key&lt;T&gt;::get (73 samples, 0.88%)</title><rect x="77.3300%" y="117" width="0.8756%" height="15" fill="rgb(237,122,38)" fg:x="6447" fg:w="73"/><text x="77.5800%" y="127.50"></text></g><g><title>[construct_hnsw] (2 samples, 0.02%)</title><rect x="78.2056%" y="149" width="0.0240%" height="15" fill="rgb(244,218,35)" fg:x="6520" fg:w="2"/><text x="78.4556%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.02%)</title><rect x="78.2056%" y="133" width="0.0240%" height="15" fill="rgb(240,68,47)" fg:x="6520" fg:w="2"/><text x="78.4556%" y="143.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (186 samples, 2.23%)</title><rect x="78.2296%" y="149" width="2.2310%" height="15" fill="rgb(210,16,53)" fg:x="6522" fg:w="186"/><text x="78.4796%" y="159.50">c..</text></g><g><title>cfree (1 samples, 0.01%)</title><rect x="80.4486%" y="133" width="0.0120%" height="15" fill="rgb(235,124,12)" fg:x="6707" fg:w="1"/><text x="80.6986%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="80.4486%" y="117" width="0.0120%" height="15" fill="rgb(224,169,11)" fg:x="6707" fg:w="1"/><text x="80.6986%" y="127.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (17 samples, 0.20%)</title><rect x="85.1145%" y="117" width="0.2039%" height="15" fill="rgb(250,166,2)" fg:x="7096" fg:w="17"/><text x="85.3645%" y="127.50"></text></g><g><title>_ZN15crossbeam_epoch8internal6Global11try_advance17h67ce1b2da7b97f59E.llvm.16816591023456506003 (17 samples, 0.20%)</title><rect x="85.1145%" y="101" width="0.2039%" height="15" fill="rgb(242,216,29)" fg:x="7096" fg:w="17"/><text x="85.3645%" y="111.50"></text></g><g><title>crossbeam_epoch::default::with_handle (365 samples, 4.38%)</title><rect x="81.0004%" y="133" width="4.3781%" height="15" fill="rgb(230,116,27)" fg:x="6753" fg:w="365"/><text x="81.2504%" y="143.50">cross..</text></g><g><title>std::sys::thread_local::fast_local::Key&lt;T&gt;::get (5 samples, 0.06%)</title><rect x="85.3185%" y="117" width="0.0600%" height="15" fill="rgb(228,99,48)" fg:x="7113" fg:w="5"/><text x="85.5685%" y="127.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (416 samples, 4.99%)</title><rect x="80.4606%" y="149" width="4.9898%" height="15" fill="rgb(253,11,6)" fg:x="6708" fg:w="416"/><text x="80.7106%" y="159.50">crossb..</text></g><g><title>std::sys::thread_local::fast_local::Key&lt;T&gt;::get (6 samples, 0.07%)</title><rect x="85.3784%" y="133" width="0.0720%" height="15" fill="rgb(247,143,39)" fg:x="7118" fg:w="6"/><text x="85.6284%" y="143.50"></text></g><g><title>_ZN10rayon_core8registry12WorkerThread9find_work17h35b6ff960f4c472aE.llvm.17884549841645512444 (5,584 samples, 66.98%)</title><rect x="18.6998%" y="165" width="66.9785%" height="15" fill="rgb(236,97,10)" fg:x="1559" fg:w="5584"/><text x="18.9498%" y="175.50">_ZN10rayon_core8registry12WorkerThread9find_work17h35b6ff960f4c472aE.llvm.17884549841645512444</text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::pop (19 samples, 0.23%)</title><rect x="85.4504%" y="149" width="0.2279%" height="15" fill="rgb(233,208,19)" fg:x="7124" fg:w="19"/><text x="85.7004%" y="159.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="85.6783%" y="165" width="0.0120%" height="15" fill="rgb(216,164,2)" fg:x="7143" fg:w="1"/><text x="85.9283%" y="175.50"></text></g><g><title>__sched_yield (114 samples, 1.37%)</title><rect x="85.6903%" y="165" width="1.3674%" height="15" fill="rgb(220,129,5)" fg:x="7144" fg:w="114"/><text x="85.9403%" y="175.50"></text></g><g><title>[unknown] (44 samples, 0.53%)</title><rect x="86.5299%" y="149" width="0.5278%" height="15" fill="rgb(242,17,10)" fg:x="7214" fg:w="44"/><text x="86.7799%" y="159.50"></text></g><g><title>cfree (68 samples, 0.82%)</title><rect x="87.0577%" y="165" width="0.8156%" height="15" fill="rgb(242,107,0)" fg:x="7258" fg:w="68"/><text x="87.3077%" y="175.50"></text></g><g><title>[libc.so.6] (57 samples, 0.68%)</title><rect x="87.1896%" y="149" width="0.6837%" height="15" fill="rgb(251,28,31)" fg:x="7269" fg:w="57"/><text x="87.4396%" y="159.50"></text></g><g><title>crossbeam_epoch::default::with_handle (41 samples, 0.49%)</title><rect x="87.8973%" y="149" width="0.4918%" height="15" fill="rgb(233,223,10)" fg:x="7328" fg:w="41"/><text x="88.1473%" y="159.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (6 samples, 0.07%)</title><rect x="88.3171%" y="133" width="0.0720%" height="15" fill="rgb(215,21,27)" fg:x="7363" fg:w="6"/><text x="88.5671%" y="143.50"></text></g><g><title>_ZN15crossbeam_epoch8internal6Global11try_advance17h67ce1b2da7b97f59E.llvm.16816591023456506003 (6 samples, 0.07%)</title><rect x="88.3171%" y="117" width="0.0720%" height="15" fill="rgb(232,23,21)" fg:x="7363" fg:w="6"/><text x="88.5671%" y="127.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (45 samples, 0.54%)</title><rect x="87.8733%" y="165" width="0.5398%" height="15" fill="rgb(244,5,23)" fg:x="7326" fg:w="45"/><text x="88.1233%" y="175.50"></text></g><g><title>std::sys::thread_local::fast_local::Key&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="88.3891%" y="149" width="0.0240%" height="15" fill="rgb(226,81,46)" fg:x="7369" fg:w="2"/><text x="88.6391%" y="159.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (1 samples, 0.01%)</title><rect x="90.9320%" y="133" width="0.0120%" height="15" fill="rgb(247,70,30)" fg:x="7581" fg:w="1"/><text x="91.1820%" y="143.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (219 samples, 2.63%)</title><rect x="88.4131%" y="165" width="2.6268%" height="15" fill="rgb(212,68,19)" fg:x="7371" fg:w="219"/><text x="88.6631%" y="175.50">ra..</text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (191 samples, 2.29%)</title><rect x="88.7490%" y="149" width="2.2910%" height="15" fill="rgb(240,187,13)" fg:x="7399" fg:w="191"/><text x="88.9990%" y="159.50">s..</text></g><g><title>syscall (8 samples, 0.10%)</title><rect x="90.9440%" y="133" width="0.0960%" height="15" fill="rgb(223,113,26)" fg:x="7582" fg:w="8"/><text x="91.1940%" y="143.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (78 samples, 0.94%)</title><rect x="91.0399%" y="165" width="0.9356%" height="15" fill="rgb(206,192,2)" fg:x="7590" fg:w="78"/><text x="91.2899%" y="175.50"></text></g><g><title>_ZN10rayon_core5sleep5Sleep20wake_specific_thread17h0649d60e857e4de1E.llvm.15331521411842462451 (78 samples, 0.94%)</title><rect x="91.0399%" y="149" width="0.9356%" height="15" fill="rgb(241,108,4)" fg:x="7590" fg:w="78"/><text x="91.2899%" y="159.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (50 samples, 0.60%)</title><rect x="91.3758%" y="133" width="0.5997%" height="15" fill="rgb(247,173,49)" fg:x="7618" fg:w="50"/><text x="91.6258%" y="143.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (7,149 samples, 85.75%)</title><rect x="6.2852%" y="229" width="85.7503%" height="15" fill="rgb(224,114,35)" fg:x="524" fg:w="7149"/><text x="6.5352%" y="239.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7,149 samples, 85.75%)</title><rect x="6.2852%" y="213" width="85.7503%" height="15" fill="rgb(245,159,27)" fg:x="524" fg:w="7149"/><text x="6.5352%" y="223.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rayon_core::registry::ThreadBuilder::run (7,149 samples, 85.75%)</title><rect x="6.2852%" y="197" width="85.7503%" height="15" fill="rgb(245,172,44)" fg:x="524" fg:w="7149"/><text x="6.5352%" y="207.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (7,148 samples, 85.74%)</title><rect x="6.2972%" y="181" width="85.7383%" height="15" fill="rgb(236,23,11)" fg:x="525" fg:w="7148"/><text x="6.5472%" y="191.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>std::thread::yield_now (5 samples, 0.06%)</title><rect x="91.9755%" y="165" width="0.0600%" height="15" fill="rgb(205,117,38)" fg:x="7668" fg:w="5"/><text x="92.2255%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="92.0955%" y="149" width="0.0120%" height="15" fill="rgb(237,72,25)" fg:x="7678" fg:w="1"/><text x="92.3455%" y="159.50"></text></g><g><title>__mprotect (1 samples, 0.01%)</title><rect x="92.0955%" y="133" width="0.0120%" height="15" fill="rgb(244,70,9)" fg:x="7678" fg:w="1"/><text x="92.3455%" y="143.50"></text></g><g><title>[libc.so.6] (7,158 samples, 85.86%)</title><rect x="6.2612%" y="277" width="85.8582%" height="15" fill="rgb(217,125,39)" fg:x="522" fg:w="7158"/><text x="6.5112%" y="287.50">[libc.so.6]</text></g><g><title>[libc.so.6] (7,157 samples, 85.85%)</title><rect x="6.2732%" y="261" width="85.8462%" height="15" fill="rgb(235,36,10)" fg:x="523" fg:w="7157"/><text x="6.5232%" y="271.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (7,156 samples, 85.83%)</title><rect x="6.2852%" y="245" width="85.8342%" height="15" fill="rgb(251,123,47)" fg:x="524" fg:w="7156"/><text x="6.5352%" y="255.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (7 samples, 0.08%)</title><rect x="92.0355%" y="229" width="0.0840%" height="15" fill="rgb(221,13,13)" fg:x="7673" fg:w="7"/><text x="92.2855%" y="239.50"></text></g><g><title>pthread_getattr_np (5 samples, 0.06%)</title><rect x="92.0595%" y="213" width="0.0600%" height="15" fill="rgb(238,131,9)" fg:x="7675" fg:w="5"/><text x="92.3095%" y="223.50"></text></g><g><title>malloc (5 samples, 0.06%)</title><rect x="92.0595%" y="197" width="0.0600%" height="15" fill="rgb(211,50,8)" fg:x="7675" fg:w="5"/><text x="92.3095%" y="207.50"></text></g><g><title>[libc.so.6] (5 samples, 0.06%)</title><rect x="92.0595%" y="181" width="0.0600%" height="15" fill="rgb(245,182,24)" fg:x="7675" fg:w="5"/><text x="92.3095%" y="191.50"></text></g><g><title>[libc.so.6] (5 samples, 0.06%)</title><rect x="92.0595%" y="165" width="0.0600%" height="15" fill="rgb(242,14,37)" fg:x="7675" fg:w="5"/><text x="92.3095%" y="175.50"></text></g><g><title>get_nprocs (1 samples, 0.01%)</title><rect x="92.1075%" y="149" width="0.0120%" height="15" fill="rgb(246,228,12)" fg:x="7679" fg:w="1"/><text x="92.3575%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="92.1075%" y="133" width="0.0120%" height="15" fill="rgb(213,55,15)" fg:x="7679" fg:w="1"/><text x="92.3575%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="92.1075%" y="117" width="0.0120%" height="15" fill="rgb(209,9,3)" fg:x="7679" fg:w="1"/><text x="92.3575%" y="127.50"></text></g><g><title>memchr@plt (1 samples, 0.01%)</title><rect x="92.1075%" y="101" width="0.0120%" height="15" fill="rgb(230,59,30)" fg:x="7679" fg:w="1"/><text x="92.3575%" y="111.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.01%)</title><rect x="92.3714%" y="261" width="0.0120%" height="15" fill="rgb(209,121,21)" fg:x="7701" fg:w="1"/><text x="92.6214%" y="271.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (1 samples, 0.01%)</title><rect x="92.3834%" y="261" width="0.0120%" height="15" fill="rgb(220,109,13)" fg:x="7702" fg:w="1"/><text x="92.6334%" y="271.50"></text></g><g><title>_ZN10rayon_core5sleep5Sleep20wake_specific_thread17h0649d60e857e4de1E.llvm.15331521411842462451 (3 samples, 0.04%)</title><rect x="92.3953%" y="261" width="0.0360%" height="15" fill="rgb(232,18,1)" fg:x="7703" fg:w="3"/><text x="92.6453%" y="271.50"></text></g><g><title>_ZN10rayon_core8registry12WorkerThread9find_work17h35b6ff960f4c472aE.llvm.17884549841645512444 (29 samples, 0.35%)</title><rect x="92.4313%" y="261" width="0.3478%" height="15" fill="rgb(215,41,42)" fg:x="7706" fg:w="29"/><text x="92.6813%" y="271.50"></text></g><g><title>_ZN15crossbeam_epoch8internal6Global11try_advance17h67ce1b2da7b97f59E.llvm.16816591023456506003 (3 samples, 0.04%)</title><rect x="92.7792%" y="261" width="0.0360%" height="15" fill="rgb(224,123,36)" fg:x="7735" fg:w="3"/><text x="93.0292%" y="271.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (194 samples, 2.33%)</title><rect x="92.8152%" y="261" width="2.3270%" height="15" fill="rgb(240,125,3)" fg:x="7738" fg:w="194"/><text x="93.0652%" y="271.50">c..</text></g><g><title>crossbeam_epoch::default::with_handle (148 samples, 1.78%)</title><rect x="95.1421%" y="261" width="1.7752%" height="15" fill="rgb(205,98,50)" fg:x="7932" fg:w="148"/><text x="95.3921%" y="271.50">c..</text></g><g><title>crossbeam_epoch::internal::Global::collect (6 samples, 0.07%)</title><rect x="96.9174%" y="261" width="0.0720%" height="15" fill="rgb(205,185,37)" fg:x="8080" fg:w="6"/><text x="97.1674%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.06%)</title><rect x="96.9893%" y="261" width="0.0600%" height="15" fill="rgb(238,207,15)" fg:x="8086" fg:w="5"/><text x="97.2393%" y="271.50"></text></g><g><title>malloc (1 samples, 0.01%)</title><rect x="97.0493%" y="261" width="0.0120%" height="15" fill="rgb(213,199,42)" fg:x="8091" fg:w="1"/><text x="97.2993%" y="271.50"></text></g><g><title>rayon_core::registry::Registry::inject_or_push (1 samples, 0.01%)</title><rect x="97.0613%" y="261" width="0.0120%" height="15" fill="rgb(235,201,11)" fg:x="8092" fg:w="1"/><text x="97.3113%" y="271.50"></text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (5 samples, 0.06%)</title><rect x="97.0733%" y="261" width="0.0600%" height="15" fill="rgb(207,46,11)" fg:x="8093" fg:w="5"/><text x="97.3233%" y="271.50"></text></g><g><title>std::panicking::try (3 samples, 0.04%)</title><rect x="97.1333%" y="261" width="0.0360%" height="15" fill="rgb(241,35,35)" fg:x="8098" fg:w="3"/><text x="97.3833%" y="271.50"></text></g><g><title>[unknown] (472 samples, 5.66%)</title><rect x="92.1195%" y="277" width="5.6615%" height="15" fill="rgb(243,32,47)" fg:x="7680" fg:w="472"/><text x="92.3695%" y="287.50">[unknow..</text></g><g><title>syscall (51 samples, 0.61%)</title><rect x="97.1692%" y="261" width="0.6117%" height="15" fill="rgb(247,202,23)" fg:x="8101" fg:w="51"/><text x="97.4192%" y="271.50"></text></g><g><title>_ZN10rayon_core5scope5scope28_$u7b$$u7b$closure$u7d$$u7d$17hc7eb047addf975f9E.llvm.5196722028160639995 (1 samples, 0.01%)</title><rect x="97.7810%" y="277" width="0.0120%" height="15" fill="rgb(219,102,11)" fg:x="8152" fg:w="1"/><text x="98.0310%" y="287.50"></text></g><g><title>_ZN10rayon_core8registry12WorkerThread9find_work17h35b6ff960f4c472aE.llvm.17884549841645512444 (3 samples, 0.04%)</title><rect x="97.7930%" y="277" width="0.0360%" height="15" fill="rgb(243,110,44)" fg:x="8153" fg:w="3"/><text x="98.0430%" y="287.50"></text></g><g><title>vecnn::dataset::FlatDataSet::new_random (1 samples, 0.01%)</title><rect x="97.8290%" y="149" width="0.0120%" height="15" fill="rgb(222,74,54)" fg:x="8156" fg:w="1"/><text x="98.0790%" y="159.50"></text></g><g><title>&lt;vecnn::dataset::FlatDataSet as vecnn::dataset::DatasetT&gt;::get (1 samples, 0.01%)</title><rect x="98.1528%" y="133" width="0.0120%" height="15" fill="rgb(216,99,12)" fg:x="8183" fg:w="1"/><text x="98.4028%" y="143.50"></text></g><g><title>&lt;vecnn::distance::SquaredDiffSum as vecnn::distance::DistanceT&gt;::distance (54 samples, 0.65%)</title><rect x="98.1648%" y="133" width="0.6477%" height="15" fill="rgb(226,22,26)" fg:x="8184" fg:w="54"/><text x="98.4148%" y="143.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (20 samples, 0.24%)</title><rect x="98.8125%" y="133" width="0.2399%" height="15" fill="rgb(217,163,10)" fg:x="8238" fg:w="20"/><text x="99.0625%" y="143.50"></text></g><g><title>rayon_core::latch::LockLatch::wait_and_reset (59 samples, 0.71%)</title><rect x="99.0644%" y="117" width="0.7077%" height="15" fill="rgb(213,25,53)" fg:x="8259" fg:w="59"/><text x="99.3144%" y="127.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (56 samples, 0.67%)</title><rect x="99.1004%" y="101" width="0.6717%" height="15" fill="rgb(252,105,26)" fg:x="8262" fg:w="56"/><text x="99.3504%" y="111.50"></text></g><g><title>syscall (3 samples, 0.04%)</title><rect x="99.7361%" y="85" width="0.0360%" height="15" fill="rgb(220,39,43)" fg:x="8315" fg:w="3"/><text x="99.9861%" y="95.50"></text></g><g><title>_start (174 samples, 2.09%)</title><rect x="97.8290%" y="277" width="2.0871%" height="15" fill="rgb(229,68,48)" fg:x="8156" fg:w="174"/><text x="98.0790%" y="287.50">_..</text></g><g><title>__libc_start_main (174 samples, 2.09%)</title><rect x="97.8290%" y="261" width="2.0871%" height="15" fill="rgb(252,8,32)" fg:x="8156" fg:w="174"/><text x="98.0790%" y="271.50">_..</text></g><g><title>[libc.so.6] (174 samples, 2.09%)</title><rect x="97.8290%" y="245" width="2.0871%" height="15" fill="rgb(223,20,43)" fg:x="8156" fg:w="174"/><text x="98.0790%" y="255.50">[..</text></g><g><title>main (174 samples, 2.09%)</title><rect x="97.8290%" y="229" width="2.0871%" height="15" fill="rgb(229,81,49)" fg:x="8156" fg:w="174"/><text x="98.0790%" y="239.50">m..</text></g><g><title>std::rt::lang_start_internal (174 samples, 2.09%)</title><rect x="97.8290%" y="213" width="2.0871%" height="15" fill="rgb(236,28,36)" fg:x="8156" fg:w="174"/><text x="98.0790%" y="223.50">s..</text></g><g><title>std::rt::lang_start::_{{closure}} (174 samples, 2.09%)</title><rect x="97.8290%" y="197" width="2.0871%" height="15" fill="rgb(249,185,26)" fg:x="8156" fg:w="174"/><text x="98.0790%" y="207.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (174 samples, 2.09%)</title><rect x="97.8290%" y="181" width="2.0871%" height="15" fill="rgb(249,174,33)" fg:x="8156" fg:w="174"/><text x="98.0790%" y="191.50">s..</text></g><g><title>construct_hnsw::main (174 samples, 2.09%)</title><rect x="97.8290%" y="165" width="2.0871%" height="15" fill="rgb(233,201,37)" fg:x="8156" fg:w="174"/><text x="98.0790%" y="175.50">c..</text></g><g><title>vecnn::hnsw::Hnsw::new (173 samples, 2.08%)</title><rect x="97.8409%" y="149" width="2.0751%" height="15" fill="rgb(221,78,26)" fg:x="8157" fg:w="173"/><text x="98.0909%" y="159.50">v..</text></g><g><title>rayon_core::registry::Registry::in_worker_cold (72 samples, 0.86%)</title><rect x="99.0524%" y="133" width="0.8636%" height="15" fill="rgb(250,127,30)" fg:x="8258" fg:w="72"/><text x="99.3024%" y="143.50"></text></g><g><title>rayon_core::registry::Registry::inject (12 samples, 0.14%)</title><rect x="99.7721%" y="117" width="0.1439%" height="15" fill="rgb(230,49,44)" fg:x="8318" fg:w="12"/><text x="100.0221%" y="127.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::push (5 samples, 0.06%)</title><rect x="99.8561%" y="101" width="0.0600%" height="15" fill="rgb(229,67,23)" fg:x="8325" fg:w="5"/><text x="100.1061%" y="111.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (3 samples, 0.04%)</title><rect x="99.9160%" y="277" width="0.0360%" height="15" fill="rgb(249,83,47)" fg:x="8330" fg:w="3"/><text x="100.1660%" y="287.50"></text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (1 samples, 0.01%)</title><rect x="99.9520%" y="277" width="0.0120%" height="15" fill="rgb(215,43,3)" fg:x="8333" fg:w="1"/><text x="100.2020%" y="287.50"></text></g><g><title>all (8,337 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(238,154,13)" fg:x="0" fg:w="8337"/><text x="0.2500%" y="319.50"></text></g><g><title>construct_hnsw (8,337 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(219,56,2)" fg:x="0" fg:w="8337"/><text x="0.2500%" y="303.50">construct_hnsw</text></g><g><title>std::thread::yield_now (3 samples, 0.04%)</title><rect x="99.9640%" y="277" width="0.0360%" height="15" fill="rgb(233,0,4)" fg:x="8334" fg:w="3"/><text x="100.2140%" y="287.50"></text></g></svg></svg>