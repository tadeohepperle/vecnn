<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="259525"><g><title>&lt;T as vecnn::dataset::DatasetT&gt;::get (28 samples, 0.01%)</title><rect x="0.0004%" y="661" width="0.0108%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="28"/><text x="0.2504%" y="671.50"></text></g><g><title>&lt;vecnn::distance::SquaredDiffSum as vecnn::distance::DistanceT&gt;::distance (50 samples, 0.02%)</title><rect x="0.0127%" y="661" width="0.0193%" height="15" fill="rgb(217,0,24)" fg:x="33" fg:w="50"/><text x="0.2627%" y="671.50"></text></g><g><title>[libc.so.6] (38 samples, 0.01%)</title><rect x="0.0320%" y="661" width="0.0146%" height="15" fill="rgb(221,193,54)" fg:x="83" fg:w="38"/><text x="0.2820%" y="671.50"></text></g><g><title>[[heap]] (147 samples, 0.06%)</title><rect x="0.0004%" y="677" width="0.0566%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="147"/><text x="0.2504%" y="687.50"></text></g><g><title>[[stack]] (30 samples, 0.01%)</title><rect x="0.0570%" y="677" width="0.0116%" height="15" fill="rgb(208,68,35)" fg:x="148" fg:w="30"/><text x="0.3070%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (253 samples, 0.10%)</title><rect x="0.0709%" y="661" width="0.0975%" height="15" fill="rgb(232,128,0)" fg:x="184" fg:w="253"/><text x="0.3209%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (253 samples, 0.10%)</title><rect x="0.0709%" y="645" width="0.0975%" height="15" fill="rgb(207,160,47)" fg:x="184" fg:w="253"/><text x="0.3209%" y="655.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::hash_one (253 samples, 0.10%)</title><rect x="0.0709%" y="629" width="0.0975%" height="15" fill="rgb(228,23,34)" fg:x="184" fg:w="253"/><text x="0.3209%" y="639.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (253 samples, 0.10%)</title><rect x="0.0709%" y="613" width="0.0975%" height="15" fill="rgb(218,30,26)" fg:x="184" fg:w="253"/><text x="0.3209%" y="623.50"></text></g><g><title>&lt;T as ahash::specialize::CallHasher&gt;::get_hash (253 samples, 0.10%)</title><rect x="0.0709%" y="597" width="0.0975%" height="15" fill="rgb(220,122,19)" fg:x="184" fg:w="253"/><text x="0.3209%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (253 samples, 0.10%)</title><rect x="0.0709%" y="581" width="0.0975%" height="15" fill="rgb(250,228,42)" fg:x="184" fg:w="253"/><text x="0.3209%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (253 samples, 0.10%)</title><rect x="0.0709%" y="565" width="0.0975%" height="15" fill="rgb(240,193,28)" fg:x="184" fg:w="253"/><text x="0.3209%" y="575.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u32 (253 samples, 0.10%)</title><rect x="0.0709%" y="549" width="0.0975%" height="15" fill="rgb(216,20,37)" fg:x="184" fg:w="253"/><text x="0.3209%" y="559.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (251 samples, 0.10%)</title><rect x="0.3090%" y="645" width="0.0967%" height="15" fill="rgb(206,188,39)" fg:x="802" fg:w="251"/><text x="0.5590%" y="655.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (251 samples, 0.10%)</title><rect x="0.3090%" y="629" width="0.0967%" height="15" fill="rgb(217,207,13)" fg:x="802" fg:w="251"/><text x="0.5590%" y="639.50"></text></g><g><title>vecnn::distance::DistanceTracker::distance (126 samples, 0.05%)</title><rect x="0.4057%" y="645" width="0.0486%" height="15" fill="rgb(231,73,38)" fg:x="1053" fg:w="126"/><text x="0.6557%" y="655.50"></text></g><g><title>[construct_hnsw] (1,024 samples, 0.39%)</title><rect x="0.0686%" y="677" width="0.3946%" height="15" fill="rgb(225,20,46)" fg:x="178" fg:w="1024"/><text x="0.3186%" y="687.50"></text></g><g><title>vecnn::hnsw::closests_points_in_layer (765 samples, 0.29%)</title><rect x="0.1684%" y="661" width="0.2948%" height="15" fill="rgb(210,31,41)" fg:x="437" fg:w="765"/><text x="0.4184%" y="671.50"></text></g><g><title>&lt;T as vecnn::dataset::DatasetT&gt;::get (162 samples, 0.06%)</title><rect x="0.4936%" y="661" width="0.0624%" height="15" fill="rgb(221,200,47)" fg:x="1281" fg:w="162"/><text x="0.7436%" y="671.50"></text></g><g><title>&lt;vecnn::distance::SquaredDiffSum as vecnn::distance::DistanceT&gt;::distance (280 samples, 0.11%)</title><rect x="0.5560%" y="661" width="0.1079%" height="15" fill="rgb(226,26,5)" fg:x="1443" fg:w="280"/><text x="0.8060%" y="671.50"></text></g><g><title>[libc.so.6] (61 samples, 0.02%)</title><rect x="0.6662%" y="661" width="0.0235%" height="15" fill="rgb(249,33,26)" fg:x="1729" fg:w="61"/><text x="0.9162%" y="671.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (96 samples, 0.04%)</title><rect x="0.6901%" y="661" width="0.0370%" height="15" fill="rgb(235,183,28)" fg:x="1791" fg:w="96"/><text x="0.9401%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (55 samples, 0.02%)</title><rect x="0.7059%" y="645" width="0.0212%" height="15" fill="rgb(221,5,38)" fg:x="1832" fg:w="55"/><text x="0.9559%" y="655.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}} (55 samples, 0.02%)</title><rect x="0.7059%" y="629" width="0.0212%" height="15" fill="rgb(247,18,42)" fg:x="1832" fg:w="55"/><text x="0.9559%" y="639.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom (55 samples, 0.02%)</title><rect x="0.7059%" y="613" width="0.0212%" height="15" fill="rgb(241,131,45)" fg:x="1832" fg:w="55"/><text x="0.9559%" y="623.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (55 samples, 0.02%)</title><rect x="0.7059%" y="597" width="0.0212%" height="15" fill="rgb(249,31,29)" fg:x="1832" fg:w="55"/><text x="0.9559%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;vecnn::hnsw::DistAnd&lt;u32&gt;&gt;&gt; (39 samples, 0.02%)</title><rect x="0.7121%" y="581" width="0.0150%" height="15" fill="rgb(225,111,53)" fg:x="1848" fg:w="39"/><text x="0.9621%" y="591.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.02%)</title><rect x="0.7121%" y="565" width="0.0150%" height="15" fill="rgb(238,160,17)" fg:x="1848" fg:w="39"/><text x="0.9621%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (39 samples, 0.02%)</title><rect x="0.7121%" y="549" width="0.0150%" height="15" fill="rgb(214,148,48)" fg:x="1848" fg:w="39"/><text x="0.9621%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (541 samples, 0.21%)</title><rect x="0.7313%" y="661" width="0.2085%" height="15" fill="rgb(232,36,49)" fg:x="1898" fg:w="541"/><text x="0.9813%" y="671.50"></text></g><g><title>vecnn::hnsw::closest_point_in_layer (104 samples, 0.04%)</title><rect x="0.9641%" y="613" width="0.0401%" height="15" fill="rgb(209,103,24)" fg:x="2502" fg:w="104"/><text x="1.2141%" y="623.50"></text></g><g><title>vecnn::distance::DistanceTracker::distance (75 samples, 0.03%)</title><rect x="0.9752%" y="597" width="0.0289%" height="15" fill="rgb(229,88,8)" fg:x="2531" fg:w="75"/><text x="1.2252%" y="607.50"></text></g><g><title>vecnn::hnsw::Hnsw::new (138 samples, 0.05%)</title><rect x="0.9537%" y="661" width="0.0532%" height="15" fill="rgb(213,181,19)" fg:x="2475" fg:w="138"/><text x="1.2037%" y="671.50"></text></g><g><title>vecnn::hnsw::construct_hnsw (138 samples, 0.05%)</title><rect x="0.9537%" y="645" width="0.0532%" height="15" fill="rgb(254,191,54)" fg:x="2475" fg:w="138"/><text x="1.2037%" y="655.50"></text></g><g><title>vecnn::hnsw::insert (138 samples, 0.05%)</title><rect x="0.9537%" y="629" width="0.0532%" height="15" fill="rgb(241,83,37)" fg:x="2475" fg:w="138"/><text x="1.2037%" y="639.50"></text></g><g><title>[unknown] (1,407 samples, 0.54%)</title><rect x="0.4651%" y="677" width="0.5421%" height="15" fill="rgb(233,36,39)" fg:x="1207" fg:w="1407"/><text x="0.7151%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (26 samples, 0.01%)</title><rect x="1.0654%" y="357" width="0.0100%" height="15" fill="rgb(226,3,54)" fg:x="2765" fg:w="26"/><text x="1.3154%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (26 samples, 0.01%)</title><rect x="1.0654%" y="341" width="0.0100%" height="15" fill="rgb(245,192,40)" fg:x="2765" fg:w="26"/><text x="1.3154%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (26 samples, 0.01%)</title><rect x="1.0654%" y="325" width="0.0100%" height="15" fill="rgb(238,167,29)" fg:x="2765" fg:w="26"/><text x="1.3154%" y="335.50"></text></g><g><title>[construct_hnsw] (27 samples, 0.01%)</title><rect x="1.0847%" y="357" width="0.0104%" height="15" fill="rgb(232,182,51)" fg:x="2815" fg:w="27"/><text x="1.3347%" y="367.50"></text></g><g><title>vecnn::hnsw::closests_points_in_layer (27 samples, 0.01%)</title><rect x="1.0847%" y="341" width="0.0104%" height="15" fill="rgb(231,60,39)" fg:x="2815" fg:w="27"/><text x="1.3347%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (55 samples, 0.02%)</title><rect x="1.1005%" y="357" width="0.0212%" height="15" fill="rgb(208,69,12)" fg:x="2856" fg:w="55"/><text x="1.3505%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (30 samples, 0.01%)</title><rect x="1.1382%" y="309" width="0.0116%" height="15" fill="rgb(235,93,37)" fg:x="2954" fg:w="30"/><text x="1.3882%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (30 samples, 0.01%)</title><rect x="1.1382%" y="293" width="0.0116%" height="15" fill="rgb(213,116,39)" fg:x="2954" fg:w="30"/><text x="1.3882%" y="303.50"></text></g><g><title>cfree (27 samples, 0.01%)</title><rect x="1.1394%" y="277" width="0.0104%" height="15" fill="rgb(222,207,29)" fg:x="2957" fg:w="27"/><text x="1.3894%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;vecnn::hnsw::SearchLayerRes&gt;&gt; (33 samples, 0.01%)</title><rect x="1.1378%" y="357" width="0.0127%" height="15" fill="rgb(206,96,30)" fg:x="2953" fg:w="33"/><text x="1.3878%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;vecnn::hnsw::SearchLayerRes&gt;&gt; (33 samples, 0.01%)</title><rect x="1.1378%" y="341" width="0.0127%" height="15" fill="rgb(218,138,4)" fg:x="2953" fg:w="33"/><text x="1.3878%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.01%)</title><rect x="1.1378%" y="325" width="0.0127%" height="15" fill="rgb(250,191,14)" fg:x="2953" fg:w="33"/><text x="1.3878%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (27 samples, 0.01%)</title><rect x="1.1506%" y="229" width="0.0104%" height="15" fill="rgb(239,60,40)" fg:x="2986" fg:w="27"/><text x="1.4006%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;ahash::hash_set::AHashSet&lt;u32&gt;&gt; (28 samples, 0.01%)</title><rect x="1.1506%" y="341" width="0.0108%" height="15" fill="rgb(206,27,48)" fg:x="2986" fg:w="28"/><text x="1.4006%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u32,ahash::random_state::RandomState&gt;&gt; (28 samples, 0.01%)</title><rect x="1.1506%" y="325" width="0.0108%" height="15" fill="rgb(225,35,8)" fg:x="2986" fg:w="28"/><text x="1.4006%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u32,ahash::random_state::RandomState&gt;&gt; (28 samples, 0.01%)</title><rect x="1.1506%" y="309" width="0.0108%" height="15" fill="rgb(250,213,24)" fg:x="2986" fg:w="28"/><text x="1.4006%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u32,(),ahash::random_state::RandomState&gt;&gt; (28 samples, 0.01%)</title><rect x="1.1506%" y="293" width="0.0108%" height="15" fill="rgb(247,123,22)" fg:x="2986" fg:w="28"/><text x="1.4006%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u32,())&gt;&gt; (28 samples, 0.01%)</title><rect x="1.1506%" y="277" width="0.0108%" height="15" fill="rgb(231,138,38)" fg:x="2986" fg:w="28"/><text x="1.4006%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.01%)</title><rect x="1.1506%" y="261" width="0.0108%" height="15" fill="rgb(231,145,46)" fg:x="2986" fg:w="28"/><text x="1.4006%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (28 samples, 0.01%)</title><rect x="1.1506%" y="245" width="0.0108%" height="15" fill="rgb(251,118,11)" fg:x="2986" fg:w="28"/><text x="1.4006%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;vecnn::hnsw::SearchBuffers&gt; (66 samples, 0.03%)</title><rect x="1.1506%" y="357" width="0.0254%" height="15" fill="rgb(217,147,25)" fg:x="2986" fg:w="66"/><text x="1.4006%" y="367.50"></text></g><g><title>&lt;vecnn::hnsw::DistAnd&lt;T&gt; as core::cmp::Ord&gt;::cmp (58 samples, 0.02%)</title><rect x="1.2427%" y="309" width="0.0223%" height="15" fill="rgb(247,81,37)" fg:x="3225" fg:w="58"/><text x="1.4927%" y="319.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::total_cmp (58 samples, 0.02%)</title><rect x="1.2427%" y="293" width="0.0223%" height="15" fill="rgb(209,12,38)" fg:x="3225" fg:w="58"/><text x="1.4927%" y="303.50"></text></g><g><title>heapless::binary_heap::BinaryHeap&lt;T,K,_&gt;::sift_up (95 samples, 0.04%)</title><rect x="1.2700%" y="309" width="0.0366%" height="15" fill="rgb(227,1,9)" fg:x="3296" fg:w="95"/><text x="1.5200%" y="319.50"></text></g><g><title>heapless::binary_heap::BinaryHeap&lt;T,K,_&gt;::sift_down_to_bottom (380 samples, 0.15%)</title><rect x="1.1937%" y="325" width="0.1464%" height="15" fill="rgb(248,47,43)" fg:x="3098" fg:w="380"/><text x="1.4437%" y="335.50"></text></g><g><title>heapless::binary_heap::Hole&lt;T&gt;::move_to (87 samples, 0.03%)</title><rect x="1.3066%" y="309" width="0.0335%" height="15" fill="rgb(221,10,30)" fg:x="3391" fg:w="87"/><text x="1.5566%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (87 samples, 0.03%)</title><rect x="1.3066%" y="293" width="0.0335%" height="15" fill="rgb(210,229,1)" fg:x="3391" fg:w="87"/><text x="1.5566%" y="303.50"></text></g><g><title>heapless::binary_heap::BinaryHeap&lt;T,K,_&gt;::pop (427 samples, 0.16%)</title><rect x="1.1849%" y="357" width="0.1645%" height="15" fill="rgb(222,148,37)" fg:x="3075" fg:w="427"/><text x="1.4349%" y="367.50"></text></g><g><title>heapless::binary_heap::BinaryHeap&lt;T,K,_&gt;::pop_unchecked (427 samples, 0.16%)</title><rect x="1.1849%" y="341" width="0.1645%" height="15" fill="rgb(234,67,33)" fg:x="3075" fg:w="427"/><text x="1.4349%" y="351.50"></text></g><g><title>heapless::binary_heap::Hole&lt;T&gt;::move_to (41 samples, 0.02%)</title><rect x="1.3995%" y="309" width="0.0158%" height="15" fill="rgb(247,98,35)" fg:x="3632" fg:w="41"/><text x="1.6495%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.02%)</title><rect x="1.3995%" y="293" width="0.0158%" height="15" fill="rgb(247,138,52)" fg:x="3632" fg:w="41"/><text x="1.6495%" y="303.50"></text></g><g><title>heapless::binary_heap::BinaryHeap&lt;T,K,_&gt;::sift_up (269 samples, 0.10%)</title><rect x="1.3494%" y="325" width="0.1037%" height="15" fill="rgb(213,79,30)" fg:x="3502" fg:w="269"/><text x="1.5994%" y="335.50"></text></g><g><title>heapless::binary_heap::Hole&lt;T&gt;::new (98 samples, 0.04%)</title><rect x="1.4153%" y="309" width="0.0378%" height="15" fill="rgb(246,177,23)" fg:x="3673" fg:w="98"/><text x="1.6653%" y="319.50"></text></g><g><title>core::ptr::read (49 samples, 0.02%)</title><rect x="1.4342%" y="293" width="0.0189%" height="15" fill="rgb(230,62,27)" fg:x="3722" fg:w="49"/><text x="1.6842%" y="303.50"></text></g><g><title>heapless::binary_heap::BinaryHeap&lt;T,K,_&gt;::push_unchecked (318 samples, 0.12%)</title><rect x="1.3494%" y="341" width="0.1225%" height="15" fill="rgb(216,154,8)" fg:x="3502" fg:w="318"/><text x="1.5994%" y="351.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::push_unchecked (49 samples, 0.02%)</title><rect x="1.4530%" y="325" width="0.0189%" height="15" fill="rgb(244,35,45)" fg:x="3771" fg:w="49"/><text x="1.7030%" y="335.50"></text></g><g><title>heapless::binary_heap::BinaryHeap&lt;T,K,_&gt;::push (362 samples, 0.14%)</title><rect x="1.3494%" y="357" width="0.1395%" height="15" fill="rgb(251,115,12)" fg:x="3502" fg:w="362"/><text x="1.5994%" y="367.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::is_full (44 samples, 0.02%)</title><rect x="1.4719%" y="341" width="0.0170%" height="15" fill="rgb(240,54,50)" fg:x="3820" fg:w="44"/><text x="1.7219%" y="351.50"></text></g><g><title>ahash::random_state::RandomState::new (27 samples, 0.01%)</title><rect x="1.4893%" y="325" width="0.0104%" height="15" fill="rgb(233,84,52)" fg:x="3865" fg:w="27"/><text x="1.7393%" y="335.50"></text></g><g><title>ahash::hash_set::AHashSet&lt;T&gt;::with_capacity (48 samples, 0.02%)</title><rect x="1.4893%" y="341" width="0.0185%" height="15" fill="rgb(207,117,47)" fg:x="3865" fg:w="48"/><text x="1.7393%" y="351.50"></text></g><g><title>vecnn::hnsw::SearchBuffers::new (66 samples, 0.03%)</title><rect x="1.4889%" y="357" width="0.0254%" height="15" fill="rgb(249,43,39)" fg:x="3864" fg:w="66"/><text x="1.7389%" y="367.50"></text></g><g><title>&lt;T as vecnn::dataset::DatasetT&gt;::get (40 samples, 0.02%)</title><rect x="1.6603%" y="341" width="0.0154%" height="15" fill="rgb(209,38,44)" fg:x="4309" fg:w="40"/><text x="1.9103%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (38 samples, 0.01%)</title><rect x="1.6758%" y="341" width="0.0146%" height="15" fill="rgb(236,212,23)" fg:x="4349" fg:w="38"/><text x="1.9258%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (38 samples, 0.01%)</title><rect x="1.6758%" y="325" width="0.0146%" height="15" fill="rgb(242,79,21)" fg:x="4349" fg:w="38"/><text x="1.9258%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (38 samples, 0.01%)</title><rect x="1.6758%" y="309" width="0.0146%" height="15" fill="rgb(211,96,35)" fg:x="4349" fg:w="38"/><text x="1.9258%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.02%)</title><rect x="1.6904%" y="341" width="0.0231%" height="15" fill="rgb(253,215,40)" fg:x="4387" fg:w="60"/><text x="1.9404%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (35 samples, 0.01%)</title><rect x="1.7000%" y="325" width="0.0135%" height="15" fill="rgb(211,81,21)" fg:x="4412" fg:w="35"/><text x="1.9500%" y="335.50"></text></g><g><title>&lt;vecnn::distance::SquaredDiffSum as vecnn::distance::DistanceT&gt;::distance (42,519 samples, 16.38%)</title><rect x="1.7289%" y="325" width="16.3834%" height="15" fill="rgb(208,190,38)" fg:x="4487" fg:w="42519"/><text x="1.9789%" y="335.50">&lt;vecnn::distance::Squared..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5,573 samples, 2.15%)</title><rect x="15.9649%" y="309" width="2.1474%" height="15" fill="rgb(235,213,38)" fg:x="41433" fg:w="5573"/><text x="16.2149%" y="319.50">c..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5,573 samples, 2.15%)</title><rect x="15.9649%" y="293" width="2.1474%" height="15" fill="rgb(237,122,38)" fg:x="41433" fg:w="5573"/><text x="16.2149%" y="303.50">&lt;..</text></g><g><title>vecnn::distance::DistanceTracker::distance (43,280 samples, 16.68%)</title><rect x="1.7135%" y="341" width="16.6766%" height="15" fill="rgb(244,218,35)" fg:x="4447" fg:w="43280"/><text x="1.9635%" y="351.50">vecnn::distance::DistanceT..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (721 samples, 0.28%)</title><rect x="18.1123%" y="325" width="0.2778%" height="15" fill="rgb(240,68,47)" fg:x="47006" fg:w="721"/><text x="18.3623%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_add (721 samples, 0.28%)</title><rect x="18.1123%" y="309" width="0.2778%" height="15" fill="rgb(210,16,53)" fg:x="47006" fg:w="721"/><text x="18.3623%" y="319.50"></text></g><g><title>vecnn::hnsw::closest_point_in_layer (43,860 samples, 16.90%)</title><rect x="1.5143%" y="357" width="16.9001%" height="15" fill="rgb(235,124,12)" fg:x="3930" fg:w="43860"/><text x="1.7643%" y="367.50">vecnn::hnsw::closest_point..</text></g><g><title>vecnn::hnsw::tracking::push_event (63 samples, 0.02%)</title><rect x="18.3901%" y="341" width="0.0243%" height="15" fill="rgb(224,169,11)" fg:x="47727" fg:w="63"/><text x="18.6401%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (63 samples, 0.02%)</title><rect x="18.3901%" y="325" width="0.0243%" height="15" fill="rgb(250,166,2)" fg:x="47727" fg:w="63"/><text x="18.6401%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (63 samples, 0.02%)</title><rect x="18.3901%" y="309" width="0.0243%" height="15" fill="rgb(242,216,29)" fg:x="47727" fg:w="63"/><text x="18.6401%" y="319.50"></text></g><g><title>vecnn::hnsw::tracking::push_event::_{{closure}} (43 samples, 0.02%)</title><rect x="18.3978%" y="293" width="0.0166%" height="15" fill="rgb(230,116,27)" fg:x="47747" fg:w="43"/><text x="18.6478%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (43 samples, 0.02%)</title><rect x="18.3978%" y="277" width="0.0166%" height="15" fill="rgb(228,99,48)" fg:x="47747" fg:w="43"/><text x="18.6478%" y="287.50"></text></g><g><title>&lt;T as vecnn::dataset::DatasetT&gt;::get (190 samples, 0.07%)</title><rect x="19.4444%" y="341" width="0.0732%" height="15" fill="rgb(253,11,6)" fg:x="50463" fg:w="190"/><text x="19.6944%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.01%)</title><rect x="19.5257%" y="341" width="0.0100%" height="15" fill="rgb(247,143,39)" fg:x="50674" fg:w="26"/><text x="19.7757%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (198 samples, 0.08%)</title><rect x="19.5403%" y="325" width="0.0763%" height="15" fill="rgb(236,97,10)" fg:x="50712" fg:w="198"/><text x="19.7903%" y="335.50"></text></g><g><title>core::ptr::read (88 samples, 0.03%)</title><rect x="19.5827%" y="309" width="0.0339%" height="15" fill="rgb(233,208,19)" fg:x="50822" fg:w="88"/><text x="19.8327%" y="319.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (127 samples, 0.05%)</title><rect x="19.8428%" y="261" width="0.0489%" height="15" fill="rgb(216,164,2)" fg:x="51497" fg:w="127"/><text x="20.0928%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (127 samples, 0.05%)</title><rect x="19.8428%" y="245" width="0.0489%" height="15" fill="rgb(220,129,5)" fg:x="51497" fg:w="127"/><text x="20.0928%" y="255.50"></text></g><g><title>&lt;core::cmp::Reverse&lt;T&gt; as core::cmp::PartialOrd&gt;::le (94 samples, 0.04%)</title><rect x="19.9553%" y="245" width="0.0362%" height="15" fill="rgb(242,17,10)" fg:x="51789" fg:w="94"/><text x="20.2053%" y="255.50"></text></g><g><title>core::cmp::PartialOrd::le (94 samples, 0.04%)</title><rect x="19.9553%" y="229" width="0.0362%" height="15" fill="rgb(242,107,0)" fg:x="51789" fg:w="94"/><text x="20.2053%" y="239.50"></text></g><g><title>&lt;vecnn::hnsw::DistAnd&lt;T&gt; as core::cmp::PartialOrd&gt;::partial_cmp (78 samples, 0.03%)</title><rect x="19.9615%" y="213" width="0.0301%" height="15" fill="rgb(251,28,31)" fg:x="51805" fg:w="78"/><text x="20.2115%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::partial_cmp (78 samples, 0.03%)</title><rect x="19.9615%" y="197" width="0.0301%" height="15" fill="rgb(233,223,10)" fg:x="51805" fg:w="78"/><text x="20.2115%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (637 samples, 0.25%)</title><rect x="19.8952%" y="261" width="0.2454%" height="15" fill="rgb(215,21,27)" fg:x="51633" fg:w="637"/><text x="20.1452%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::le (387 samples, 0.15%)</title><rect x="19.9915%" y="245" width="0.1491%" height="15" fill="rgb(232,23,21)" fg:x="51883" fg:w="387"/><text x="20.2415%" y="255.50"></text></g><g><title>&lt;vecnn::hnsw::DistAnd&lt;T&gt; as core::cmp::PartialOrd&gt;::partial_cmp (302 samples, 0.12%)</title><rect x="20.0243%" y="229" width="0.1164%" height="15" fill="rgb(244,5,23)" fg:x="51968" fg:w="302"/><text x="20.2743%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::partial_cmp (302 samples, 0.12%)</title><rect x="20.0243%" y="213" width="0.1164%" height="15" fill="rgb(226,81,46)" fg:x="51968" fg:w="302"/><text x="20.2743%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (895 samples, 0.34%)</title><rect x="19.7989%" y="277" width="0.3449%" height="15" fill="rgb(247,70,30)" fg:x="51383" fg:w="895"/><text x="20.0489%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (596 samples, 0.23%)</title><rect x="20.1437%" y="261" width="0.2297%" height="15" fill="rgb(212,68,19)" fg:x="52278" fg:w="596"/><text x="20.3937%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (621 samples, 0.24%)</title><rect x="20.1437%" y="277" width="0.2393%" height="15" fill="rgb(240,187,13)" fg:x="52278" fg:w="621"/><text x="20.3937%" y="287.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (703 samples, 0.27%)</title><rect x="20.3830%" y="277" width="0.2709%" height="15" fill="rgb(223,113,26)" fg:x="52899" fg:w="703"/><text x="20.6330%" y="287.50"></text></g><g><title>core::ptr::read (703 samples, 0.27%)</title><rect x="20.3830%" y="261" width="0.2709%" height="15" fill="rgb(206,192,2)" fg:x="52899" fg:w="703"/><text x="20.6330%" y="271.50"></text></g><g><title>&lt;core::cmp::Reverse&lt;T&gt; as core::cmp::PartialOrd&gt;::le (211 samples, 0.08%)</title><rect x="20.7082%" y="261" width="0.0813%" height="15" fill="rgb(241,108,4)" fg:x="53743" fg:w="211"/><text x="20.9582%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::le (211 samples, 0.08%)</title><rect x="20.7082%" y="245" width="0.0813%" height="15" fill="rgb(247,173,49)" fg:x="53743" fg:w="211"/><text x="20.9582%" y="255.50"></text></g><g><title>&lt;vecnn::hnsw::DistAnd&lt;T&gt; as core::cmp::PartialOrd&gt;::partial_cmp (135 samples, 0.05%)</title><rect x="20.7375%" y="229" width="0.0520%" height="15" fill="rgb(224,114,35)" fg:x="53819" fg:w="135"/><text x="20.9875%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::partial_cmp (135 samples, 0.05%)</title><rect x="20.7375%" y="213" width="0.0520%" height="15" fill="rgb(245,159,27)" fg:x="53819" fg:w="135"/><text x="20.9875%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (816 samples, 0.31%)</title><rect x="20.6539%" y="277" width="0.3144%" height="15" fill="rgb(245,172,44)" fg:x="53602" fg:w="816"/><text x="20.9039%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::le (464 samples, 0.18%)</title><rect x="20.7895%" y="261" width="0.1788%" height="15" fill="rgb(236,23,11)" fg:x="53954" fg:w="464"/><text x="21.0395%" y="271.50"></text></g><g><title>&lt;vecnn::hnsw::DistAnd&lt;T&gt; as core::cmp::PartialOrd&gt;::partial_cmp (329 samples, 0.13%)</title><rect x="20.8415%" y="245" width="0.1268%" height="15" fill="rgb(205,117,38)" fg:x="54089" fg:w="329"/><text x="21.0915%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::partial_cmp (329 samples, 0.13%)</title><rect x="20.8415%" y="229" width="0.1268%" height="15" fill="rgb(237,72,25)" fg:x="54089" fg:w="329"/><text x="21.0915%" y="239.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_down_to_bottom (3,466 samples, 1.34%)</title><rect x="19.6370%" y="293" width="1.3355%" height="15" fill="rgb(244,70,9)" fg:x="50963" fg:w="3466"/><text x="19.8870%" y="303.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (3,819 samples, 1.47%)</title><rect x="19.5380%" y="341" width="1.4715%" height="15" fill="rgb(217,125,39)" fg:x="50706" fg:w="3819"/><text x="19.7880%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,615 samples, 1.39%)</title><rect x="19.6166%" y="325" width="1.3929%" height="15" fill="rgb(235,36,10)" fg:x="50910" fg:w="3615"/><text x="19.8666%" y="335.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop::_{{closure}} (3,563 samples, 1.37%)</title><rect x="19.6366%" y="309" width="1.3729%" height="15" fill="rgb(251,123,47)" fg:x="50962" fg:w="3563"/><text x="19.8866%" y="319.50"></text></g><g><title>core::mem::swap (96 samples, 0.04%)</title><rect x="20.9725%" y="293" width="0.0370%" height="15" fill="rgb(221,13,13)" fg:x="54429" fg:w="96"/><text x="21.2225%" y="303.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::len (367 samples, 0.14%)</title><rect x="21.0265%" y="325" width="0.1414%" height="15" fill="rgb(238,131,9)" fg:x="54569" fg:w="367"/><text x="21.2765%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (367 samples, 0.14%)</title><rect x="21.0265%" y="309" width="0.1414%" height="15" fill="rgb(211,50,8)" fg:x="54569" fg:w="367"/><text x="21.2765%" y="319.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (356 samples, 0.14%)</title><rect x="21.3178%" y="309" width="0.1372%" height="15" fill="rgb(245,182,24)" fg:x="55325" fg:w="356"/><text x="21.5678%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (356 samples, 0.14%)</title><rect x="21.3178%" y="293" width="0.1372%" height="15" fill="rgb(242,14,37)" fg:x="55325" fg:w="356"/><text x="21.5678%" y="303.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (236 samples, 0.09%)</title><rect x="21.4550%" y="309" width="0.0909%" height="15" fill="rgb(246,228,12)" fg:x="55681" fg:w="236"/><text x="21.7050%" y="319.50"></text></g><g><title>core::ptr::read (236 samples, 0.09%)</title><rect x="21.4550%" y="293" width="0.0909%" height="15" fill="rgb(213,55,15)" fg:x="55681" fg:w="236"/><text x="21.7050%" y="303.50"></text></g><g><title>&lt;core::cmp::Reverse&lt;T&gt; as core::cmp::PartialOrd&gt;::le (743 samples, 0.29%)</title><rect x="21.6330%" y="293" width="0.2863%" height="15" fill="rgb(209,9,3)" fg:x="56143" fg:w="743"/><text x="21.8830%" y="303.50"></text></g><g><title>core::cmp::PartialOrd::le (743 samples, 0.29%)</title><rect x="21.6330%" y="277" width="0.2863%" height="15" fill="rgb(230,59,30)" fg:x="56143" fg:w="743"/><text x="21.8830%" y="287.50"></text></g><g><title>&lt;vecnn::hnsw::DistAnd&lt;T&gt; as core::cmp::PartialOrd&gt;::partial_cmp (616 samples, 0.24%)</title><rect x="21.6819%" y="261" width="0.2374%" height="15" fill="rgb(209,121,21)" fg:x="56270" fg:w="616"/><text x="21.9319%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::partial_cmp (616 samples, 0.24%)</title><rect x="21.6819%" y="245" width="0.2374%" height="15" fill="rgb(220,109,13)" fg:x="56270" fg:w="616"/><text x="21.9319%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (1,344 samples, 0.52%)</title><rect x="21.5459%" y="309" width="0.5179%" height="15" fill="rgb(232,18,1)" fg:x="55917" fg:w="1344"/><text x="21.7959%" y="319.50"></text></g><g><title>core::cmp::PartialOrd::le (375 samples, 0.14%)</title><rect x="21.9193%" y="293" width="0.1445%" height="15" fill="rgb(215,41,42)" fg:x="56886" fg:w="375"/><text x="22.1693%" y="303.50"></text></g><g><title>&lt;vecnn::hnsw::DistAnd&lt;T&gt; as core::cmp::PartialOrd&gt;::partial_cmp (294 samples, 0.11%)</title><rect x="21.9505%" y="277" width="0.1133%" height="15" fill="rgb(224,123,36)" fg:x="56967" fg:w="294"/><text x="22.2005%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::partial_cmp (294 samples, 0.11%)</title><rect x="21.9505%" y="261" width="0.1133%" height="15" fill="rgb(240,125,3)" fg:x="56967" fg:w="294"/><text x="22.2005%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;core::cmp::Reverse&lt;vecnn::hnsw::DistAnd&lt;u32&gt;&gt;&gt;&gt; (288 samples, 0.11%)</title><rect x="22.0638%" y="309" width="0.1110%" height="15" fill="rgb(205,98,50)" fg:x="57261" fg:w="288"/><text x="22.3138%" y="319.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (288 samples, 0.11%)</title><rect x="22.0638%" y="293" width="0.1110%" height="15" fill="rgb(205,185,37)" fg:x="57261" fg:w="288"/><text x="22.3138%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (288 samples, 0.11%)</title><rect x="22.0638%" y="277" width="0.1110%" height="15" fill="rgb(238,207,15)" fg:x="57261" fg:w="288"/><text x="22.3138%" y="287.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (2,718 samples, 1.05%)</title><rect x="21.1679%" y="325" width="1.0473%" height="15" fill="rgb(213,199,42)" fg:x="54936" fg:w="2718"/><text x="21.4179%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;vecnn::hnsw::DistAnd&lt;u32&gt;&gt;&gt; (105 samples, 0.04%)</title><rect x="22.1747%" y="309" width="0.0405%" height="15" fill="rgb(235,201,11)" fg:x="57549" fg:w="105"/><text x="22.4247%" y="319.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.04%)</title><rect x="22.1747%" y="293" width="0.0405%" height="15" fill="rgb(207,46,11)" fg:x="57549" fg:w="105"/><text x="22.4247%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (105 samples, 0.04%)</title><rect x="22.1747%" y="277" width="0.0405%" height="15" fill="rgb(241,35,35)" fg:x="57549" fg:w="105"/><text x="22.4247%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (253 samples, 0.10%)</title><rect x="22.3142%" y="261" width="0.0975%" height="15" fill="rgb(243,32,47)" fg:x="57911" fg:w="253"/><text x="22.5642%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (253 samples, 0.10%)</title><rect x="22.3142%" y="245" width="0.0975%" height="15" fill="rgb(247,202,23)" fg:x="57911" fg:w="253"/><text x="22.5642%" y="255.50"></text></g><g><title>alloc::alloc::realloc (253 samples, 0.10%)</title><rect x="22.3142%" y="229" width="0.0975%" height="15" fill="rgb(219,102,11)" fg:x="57911" fg:w="253"/><text x="22.5642%" y="239.50"></text></g><g><title>realloc (247 samples, 0.10%)</title><rect x="22.3165%" y="213" width="0.0952%" height="15" fill="rgb(243,110,44)" fg:x="57917" fg:w="247"/><text x="22.5665%" y="223.50"></text></g><g><title>[libc.so.6] (219 samples, 0.08%)</title><rect x="22.3273%" y="197" width="0.0844%" height="15" fill="rgb(222,74,54)" fg:x="57945" fg:w="219"/><text x="22.5773%" y="207.50"></text></g><g><title>[libc.so.6] (193 samples, 0.07%)</title><rect x="22.3373%" y="181" width="0.0744%" height="15" fill="rgb(216,99,12)" fg:x="57971" fg:w="193"/><text x="22.5873%" y="191.50"></text></g><g><title>[libc.so.6] (28 samples, 0.01%)</title><rect x="22.4009%" y="165" width="0.0108%" height="15" fill="rgb(226,22,26)" fg:x="58136" fg:w="28"/><text x="22.6509%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (257 samples, 0.10%)</title><rect x="22.3135%" y="277" width="0.0990%" height="15" fill="rgb(217,163,10)" fg:x="57909" fg:w="257"/><text x="22.5635%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (271 samples, 0.10%)</title><rect x="22.3104%" y="309" width="0.1044%" height="15" fill="rgb(213,25,53)" fg:x="57901" fg:w="271"/><text x="22.5604%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (271 samples, 0.10%)</title><rect x="22.3104%" y="293" width="0.1044%" height="15" fill="rgb(252,105,26)" fg:x="57901" fg:w="271"/><text x="22.5604%" y="303.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (3,761 samples, 1.45%)</title><rect x="21.0095%" y="341" width="1.4492%" height="15" fill="rgb(220,39,43)" fg:x="54525" fg:w="3761"/><text x="21.2595%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (632 samples, 0.24%)</title><rect x="22.2152%" y="325" width="0.2435%" height="15" fill="rgb(229,68,48)" fg:x="57654" fg:w="632"/><text x="22.4652%" y="335.50"></text></g><g><title>core::ptr::write (108 samples, 0.04%)</title><rect x="22.4171%" y="309" width="0.0416%" height="15" fill="rgb(252,8,32)" fg:x="58178" fg:w="108"/><text x="22.6671%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (66 samples, 0.03%)</title><rect x="22.5685%" y="277" width="0.0254%" height="15" fill="rgb(223,20,43)" fg:x="58571" fg:w="66"/><text x="22.8185%" y="287.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::hash_one (66 samples, 0.03%)</title><rect x="22.5685%" y="261" width="0.0254%" height="15" fill="rgb(229,81,49)" fg:x="58571" fg:w="66"/><text x="22.8185%" y="271.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (66 samples, 0.03%)</title><rect x="22.5685%" y="245" width="0.0254%" height="15" fill="rgb(236,28,36)" fg:x="58571" fg:w="66"/><text x="22.8185%" y="255.50"></text></g><g><title>&lt;T as ahash::specialize::CallHasher&gt;::get_hash (66 samples, 0.03%)</title><rect x="22.5685%" y="229" width="0.0254%" height="15" fill="rgb(249,185,26)" fg:x="58571" fg:w="66"/><text x="22.8185%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (66 samples, 0.03%)</title><rect x="22.5685%" y="213" width="0.0254%" height="15" fill="rgb(249,174,33)" fg:x="58571" fg:w="66"/><text x="22.8185%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (66 samples, 0.03%)</title><rect x="22.5685%" y="197" width="0.0254%" height="15" fill="rgb(233,201,37)" fg:x="58571" fg:w="66"/><text x="22.8185%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u32 (66 samples, 0.03%)</title><rect x="22.5685%" y="181" width="0.0254%" height="15" fill="rgb(221,78,26)" fg:x="58571" fg:w="66"/><text x="22.8185%" y="191.50"></text></g><g><title>[construct_hnsw] (67 samples, 0.03%)</title><rect x="22.5685%" y="309" width="0.0258%" height="15" fill="rgb(250,127,30)" fg:x="58571" fg:w="67"/><text x="22.8185%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (67 samples, 0.03%)</title><rect x="22.5685%" y="293" width="0.0258%" height="15" fill="rgb(230,49,44)" fg:x="58571" fg:w="67"/><text x="22.8185%" y="303.50"></text></g><g><title>ahash::operations::folded_multiply (403 samples, 0.16%)</title><rect x="22.5944%" y="213" width="0.1553%" height="15" fill="rgb(229,67,23)" fg:x="58638" fg:w="403"/><text x="22.8444%" y="223.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (102 samples, 0.04%)</title><rect x="22.7103%" y="197" width="0.0393%" height="15" fill="rgb(249,83,47)" fg:x="58939" fg:w="102"/><text x="22.9603%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (456 samples, 0.18%)</title><rect x="22.5944%" y="229" width="0.1757%" height="15" fill="rgb(215,43,3)" fg:x="58638" fg:w="456"/><text x="22.8444%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (53 samples, 0.02%)</title><rect x="22.7496%" y="213" width="0.0204%" height="15" fill="rgb(238,154,13)" fg:x="59041" fg:w="53"/><text x="22.9996%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (1,082 samples, 0.42%)</title><rect x="22.5944%" y="293" width="0.4169%" height="15" fill="rgb(219,56,2)" fg:x="58638" fg:w="1082"/><text x="22.8444%" y="303.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::hash_one (1,082 samples, 0.42%)</title><rect x="22.5944%" y="277" width="0.4169%" height="15" fill="rgb(233,0,4)" fg:x="58638" fg:w="1082"/><text x="22.8444%" y="287.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (1,082 samples, 0.42%)</title><rect x="22.5944%" y="261" width="0.4169%" height="15" fill="rgb(235,30,7)" fg:x="58638" fg:w="1082"/><text x="22.8444%" y="271.50"></text></g><g><title>&lt;T as ahash::specialize::CallHasher&gt;::get_hash (1,082 samples, 0.42%)</title><rect x="22.5944%" y="245" width="0.4169%" height="15" fill="rgb(250,79,13)" fg:x="58638" fg:w="1082"/><text x="22.8444%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (626 samples, 0.24%)</title><rect x="22.7701%" y="229" width="0.2412%" height="15" fill="rgb(211,146,34)" fg:x="59094" fg:w="626"/><text x="23.0201%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (626 samples, 0.24%)</title><rect x="22.7701%" y="213" width="0.2412%" height="15" fill="rgb(228,22,38)" fg:x="59094" fg:w="626"/><text x="23.0201%" y="223.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u32 (626 samples, 0.24%)</title><rect x="22.7701%" y="197" width="0.2412%" height="15" fill="rgb(235,168,5)" fg:x="59094" fg:w="626"/><text x="23.0201%" y="207.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (625 samples, 0.24%)</title><rect x="22.7704%" y="181" width="0.2408%" height="15" fill="rgb(221,155,16)" fg:x="59095" fg:w="625"/><text x="23.0204%" y="191.50"></text></g><g><title>ahash::operations::folded_multiply (348 samples, 0.13%)</title><rect x="22.8772%" y="165" width="0.1341%" height="15" fill="rgb(215,215,53)" fg:x="59372" fg:w="348"/><text x="23.1272%" y="175.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (63 samples, 0.02%)</title><rect x="22.9870%" y="149" width="0.0243%" height="15" fill="rgb(223,4,10)" fg:x="59657" fg:w="63"/><text x="23.2370%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (199 samples, 0.08%)</title><rect x="23.1238%" y="181" width="0.0767%" height="15" fill="rgb(234,103,6)" fg:x="60012" fg:w="199"/><text x="23.3738%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (199 samples, 0.08%)</title><rect x="23.1238%" y="165" width="0.0767%" height="15" fill="rgb(227,97,0)" fg:x="60012" fg:w="199"/><text x="23.3738%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (217 samples, 0.08%)</title><rect x="23.1172%" y="213" width="0.0836%" height="15" fill="rgb(234,150,53)" fg:x="59995" fg:w="217"/><text x="23.3672%" y="223.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (214 samples, 0.08%)</title><rect x="23.1184%" y="197" width="0.0825%" height="15" fill="rgb(228,201,54)" fg:x="59998" fg:w="214"/><text x="23.3684%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (222 samples, 0.09%)</title><rect x="23.2008%" y="213" width="0.0855%" height="15" fill="rgb(222,22,37)" fg:x="60212" fg:w="222"/><text x="23.4508%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (62 samples, 0.02%)</title><rect x="23.2872%" y="149" width="0.0239%" height="15" fill="rgb(237,53,32)" fg:x="60436" fg:w="62"/><text x="23.5372%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (62 samples, 0.02%)</title><rect x="23.2872%" y="133" width="0.0239%" height="15" fill="rgb(233,25,53)" fg:x="60436" fg:w="62"/><text x="23.5372%" y="143.50"></text></g><g><title>cfree (53 samples, 0.02%)</title><rect x="23.2906%" y="117" width="0.0204%" height="15" fill="rgb(210,40,34)" fg:x="60445" fg:w="53"/><text x="23.5406%" y="127.50"></text></g><g><title>[libc.so.6] (33 samples, 0.01%)</title><rect x="23.2983%" y="101" width="0.0127%" height="15" fill="rgb(241,220,44)" fg:x="60465" fg:w="33"/><text x="23.5483%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (67 samples, 0.03%)</title><rect x="23.2872%" y="213" width="0.0258%" height="15" fill="rgb(235,28,35)" fg:x="60436" fg:w="67"/><text x="23.5372%" y="223.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.03%)</title><rect x="23.2872%" y="197" width="0.0258%" height="15" fill="rgb(210,56,17)" fg:x="60436" fg:w="67"/><text x="23.5372%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (67 samples, 0.03%)</title><rect x="23.2872%" y="181" width="0.0258%" height="15" fill="rgb(224,130,29)" fg:x="60436" fg:w="67"/><text x="23.5372%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (67 samples, 0.03%)</title><rect x="23.2872%" y="165" width="0.0258%" height="15" fill="rgb(235,212,8)" fg:x="60436" fg:w="67"/><text x="23.5372%" y="175.50"></text></g><g><title>ahash::operations::folded_multiply (206 samples, 0.08%)</title><rect x="23.3943%" y="101" width="0.0794%" height="15" fill="rgb(223,33,50)" fg:x="60714" fg:w="206"/><text x="23.6443%" y="111.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (26 samples, 0.01%)</title><rect x="23.4636%" y="85" width="0.0100%" height="15" fill="rgb(219,149,13)" fg:x="60894" fg:w="26"/><text x="23.7136%" y="95.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (212 samples, 0.08%)</title><rect x="23.3943%" y="117" width="0.0817%" height="15" fill="rgb(250,156,29)" fg:x="60714" fg:w="212"/><text x="23.6443%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (802 samples, 0.31%)</title><rect x="23.3130%" y="213" width="0.3090%" height="15" fill="rgb(216,193,19)" fg:x="60503" fg:w="802"/><text x="23.5630%" y="223.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (591 samples, 0.23%)</title><rect x="23.3943%" y="197" width="0.2277%" height="15" fill="rgb(216,135,14)" fg:x="60714" fg:w="591"/><text x="23.6443%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (591 samples, 0.23%)</title><rect x="23.3943%" y="181" width="0.2277%" height="15" fill="rgb(241,47,5)" fg:x="60714" fg:w="591"/><text x="23.6443%" y="191.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::hash_one (591 samples, 0.23%)</title><rect x="23.3943%" y="165" width="0.2277%" height="15" fill="rgb(233,42,35)" fg:x="60714" fg:w="591"/><text x="23.6443%" y="175.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (591 samples, 0.23%)</title><rect x="23.3943%" y="149" width="0.2277%" height="15" fill="rgb(231,13,6)" fg:x="60714" fg:w="591"/><text x="23.6443%" y="159.50"></text></g><g><title>&lt;T as ahash::specialize::CallHasher&gt;::get_hash (591 samples, 0.23%)</title><rect x="23.3943%" y="133" width="0.2277%" height="15" fill="rgb(207,181,40)" fg:x="60714" fg:w="591"/><text x="23.6443%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (379 samples, 0.15%)</title><rect x="23.4760%" y="117" width="0.1460%" height="15" fill="rgb(254,173,49)" fg:x="60926" fg:w="379"/><text x="23.7260%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (379 samples, 0.15%)</title><rect x="23.4760%" y="101" width="0.1460%" height="15" fill="rgb(221,1,38)" fg:x="60926" fg:w="379"/><text x="23.7260%" y="111.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u32 (379 samples, 0.15%)</title><rect x="23.4760%" y="85" width="0.1460%" height="15" fill="rgb(206,124,46)" fg:x="60926" fg:w="379"/><text x="23.7260%" y="95.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (379 samples, 0.15%)</title><rect x="23.4760%" y="69" width="0.1460%" height="15" fill="rgb(249,21,11)" fg:x="60926" fg:w="379"/><text x="23.7260%" y="79.50"></text></g><g><title>ahash::operations::folded_multiply (371 samples, 0.14%)</title><rect x="23.4790%" y="53" width="0.1430%" height="15" fill="rgb(222,201,40)" fg:x="60934" fg:w="371"/><text x="23.7290%" y="63.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (180 samples, 0.07%)</title><rect x="23.5526%" y="37" width="0.0694%" height="15" fill="rgb(235,61,29)" fg:x="61125" fg:w="180"/><text x="23.8026%" y="47.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (97 samples, 0.04%)</title><rect x="23.7977%" y="165" width="0.0374%" height="15" fill="rgb(219,207,3)" fg:x="61761" fg:w="97"/><text x="24.0477%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (487 samples, 0.19%)</title><rect x="23.7021%" y="181" width="0.1877%" height="15" fill="rgb(222,56,46)" fg:x="61513" fg:w="487"/><text x="23.9521%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (142 samples, 0.05%)</title><rect x="23.8351%" y="165" width="0.0547%" height="15" fill="rgb(239,76,54)" fg:x="61858" fg:w="142"/><text x="24.0851%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (142 samples, 0.05%)</title><rect x="23.8351%" y="149" width="0.0547%" height="15" fill="rgb(231,124,27)" fg:x="61858" fg:w="142"/><text x="24.0851%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1,105 samples, 0.43%)</title><rect x="23.8898%" y="181" width="0.4258%" height="15" fill="rgb(249,195,6)" fg:x="62000" fg:w="1105"/><text x="24.1398%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (928 samples, 0.36%)</title><rect x="23.9580%" y="165" width="0.3576%" height="15" fill="rgb(237,174,47)" fg:x="62177" fg:w="928"/><text x="24.2080%" y="175.50"></text></g><g><title>hashbrown::raw::is_full (928 samples, 0.36%)</title><rect x="23.9580%" y="149" width="0.3576%" height="15" fill="rgb(206,201,31)" fg:x="62177" fg:w="928"/><text x="24.2080%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (157 samples, 0.06%)</title><rect x="24.3156%" y="181" width="0.0605%" height="15" fill="rgb(231,57,52)" fg:x="63105" fg:w="157"/><text x="24.5656%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (2,273 samples, 0.88%)</title><rect x="23.6286%" y="197" width="0.8758%" height="15" fill="rgb(248,177,22)" fg:x="61322" fg:w="2273"/><text x="23.8786%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (333 samples, 0.13%)</title><rect x="24.3761%" y="181" width="0.1283%" height="15" fill="rgb(215,211,37)" fg:x="63262" fg:w="333"/><text x="24.6261%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (333 samples, 0.13%)</title><rect x="24.3761%" y="165" width="0.1283%" height="15" fill="rgb(241,128,51)" fg:x="63262" fg:w="333"/><text x="24.6261%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (333 samples, 0.13%)</title><rect x="24.3761%" y="149" width="0.1283%" height="15" fill="rgb(227,165,31)" fg:x="63262" fg:w="333"/><text x="24.6261%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (176 samples, 0.07%)</title><rect x="24.5044%" y="181" width="0.0678%" height="15" fill="rgb(228,167,24)" fg:x="63595" fg:w="176"/><text x="24.7544%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (2,626 samples, 1.01%)</title><rect x="23.6286%" y="213" width="1.0118%" height="15" fill="rgb(228,143,12)" fg:x="61322" fg:w="2626"/><text x="23.8786%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (353 samples, 0.14%)</title><rect x="24.5044%" y="197" width="0.1360%" height="15" fill="rgb(249,149,8)" fg:x="63595" fg:w="353"/><text x="24.7544%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (177 samples, 0.07%)</title><rect x="24.5722%" y="181" width="0.0682%" height="15" fill="rgb(243,35,44)" fg:x="63771" fg:w="177"/><text x="24.8222%" y="191.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (159 samples, 0.06%)</title><rect x="24.6508%" y="165" width="0.0613%" height="15" fill="rgb(246,89,9)" fg:x="63975" fg:w="159"/><text x="24.9008%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (159 samples, 0.06%)</title><rect x="24.6508%" y="149" width="0.0613%" height="15" fill="rgb(233,213,13)" fg:x="63975" fg:w="159"/><text x="24.9008%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (159 samples, 0.06%)</title><rect x="24.6508%" y="133" width="0.0613%" height="15" fill="rgb(233,141,41)" fg:x="63975" fg:w="159"/><text x="24.9008%" y="143.50"></text></g><g><title>alloc::alloc::alloc (156 samples, 0.06%)</title><rect x="24.6520%" y="117" width="0.0601%" height="15" fill="rgb(239,167,4)" fg:x="63978" fg:w="156"/><text x="24.9020%" y="127.50"></text></g><g><title>malloc (143 samples, 0.06%)</title><rect x="24.6570%" y="101" width="0.0551%" height="15" fill="rgb(209,217,16)" fg:x="63991" fg:w="143"/><text x="24.9070%" y="111.50"></text></g><g><title>[libc.so.6] (94 samples, 0.04%)</title><rect x="24.6759%" y="85" width="0.0362%" height="15" fill="rgb(219,88,35)" fg:x="64040" fg:w="94"/><text x="24.9259%" y="95.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (173 samples, 0.07%)</title><rect x="24.6466%" y="181" width="0.0667%" height="15" fill="rgb(220,193,23)" fg:x="63964" fg:w="173"/><text x="24.8966%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (4,162 samples, 1.60%)</title><rect x="23.1157%" y="229" width="1.6037%" height="15" fill="rgb(230,90,52)" fg:x="59991" fg:w="4162"/><text x="23.3657%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (205 samples, 0.08%)</title><rect x="24.6404%" y="213" width="0.0790%" height="15" fill="rgb(252,106,19)" fg:x="63948" fg:w="205"/><text x="24.8904%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (205 samples, 0.08%)</title><rect x="24.6404%" y="197" width="0.0790%" height="15" fill="rgb(206,74,20)" fg:x="63948" fg:w="205"/><text x="24.8904%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4,397 samples, 1.69%)</title><rect x="23.0255%" y="277" width="1.6942%" height="15" fill="rgb(230,138,44)" fg:x="59757" fg:w="4397"/><text x="23.2755%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4,173 samples, 1.61%)</title><rect x="23.1118%" y="261" width="1.6079%" height="15" fill="rgb(235,182,43)" fg:x="59981" fg:w="4173"/><text x="23.3618%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (4,173 samples, 1.61%)</title><rect x="23.1118%" y="245" width="1.6079%" height="15" fill="rgb(242,16,51)" fg:x="59981" fg:w="4173"/><text x="23.3618%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (658 samples, 0.25%)</title><rect x="25.0253%" y="245" width="0.2535%" height="15" fill="rgb(248,9,4)" fg:x="64947" fg:w="658"/><text x="25.2753%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (307 samples, 0.12%)</title><rect x="25.1606%" y="229" width="0.1183%" height="15" fill="rgb(210,31,22)" fg:x="65298" fg:w="307"/><text x="25.4106%" y="239.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (307 samples, 0.12%)</title><rect x="25.1606%" y="213" width="0.1183%" height="15" fill="rgb(239,54,39)" fg:x="65298" fg:w="307"/><text x="25.4106%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (661 samples, 0.25%)</title><rect x="25.0253%" y="261" width="0.2547%" height="15" fill="rgb(230,99,41)" fg:x="64947" fg:w="661"/><text x="25.2753%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (95 samples, 0.04%)</title><rect x="25.2800%" y="261" width="0.0366%" height="15" fill="rgb(253,106,12)" fg:x="65608" fg:w="95"/><text x="25.5300%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (95 samples, 0.04%)</title><rect x="25.2800%" y="245" width="0.0366%" height="15" fill="rgb(213,46,41)" fg:x="65608" fg:w="95"/><text x="25.5300%" y="255.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (53 samples, 0.02%)</title><rect x="25.3166%" y="261" width="0.0204%" height="15" fill="rgb(215,133,35)" fg:x="65703" fg:w="53"/><text x="25.5666%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (311 samples, 0.12%)</title><rect x="25.3371%" y="261" width="0.1198%" height="15" fill="rgb(213,28,5)" fg:x="65756" fg:w="311"/><text x="25.5871%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (254 samples, 0.10%)</title><rect x="25.3590%" y="245" width="0.0979%" height="15" fill="rgb(215,77,49)" fg:x="65813" fg:w="254"/><text x="25.6090%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (254 samples, 0.10%)</title><rect x="25.3590%" y="229" width="0.0979%" height="15" fill="rgb(248,100,22)" fg:x="65813" fg:w="254"/><text x="25.6090%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (254 samples, 0.10%)</title><rect x="25.3590%" y="213" width="0.0979%" height="15" fill="rgb(208,67,9)" fg:x="65813" fg:w="254"/><text x="25.6090%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (254 samples, 0.10%)</title><rect x="25.3590%" y="197" width="0.0979%" height="15" fill="rgb(219,133,21)" fg:x="65813" fg:w="254"/><text x="25.6090%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (201 samples, 0.08%)</title><rect x="25.4781%" y="245" width="0.0774%" height="15" fill="rgb(246,46,29)" fg:x="66122" fg:w="201"/><text x="25.7281%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (421 samples, 0.16%)</title><rect x="25.4569%" y="261" width="0.1622%" height="15" fill="rgb(246,185,52)" fg:x="66067" fg:w="421"/><text x="25.7069%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (165 samples, 0.06%)</title><rect x="25.5555%" y="245" width="0.0636%" height="15" fill="rgb(252,136,11)" fg:x="66323" fg:w="165"/><text x="25.8055%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (165 samples, 0.06%)</title><rect x="25.5555%" y="229" width="0.0636%" height="15" fill="rgb(219,138,53)" fg:x="66323" fg:w="165"/><text x="25.8055%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (297 samples, 0.11%)</title><rect x="25.6191%" y="261" width="0.1144%" height="15" fill="rgb(211,51,23)" fg:x="66488" fg:w="297"/><text x="25.8691%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (172 samples, 0.07%)</title><rect x="25.6673%" y="245" width="0.0663%" height="15" fill="rgb(247,221,28)" fg:x="66613" fg:w="172"/><text x="25.9173%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (740 samples, 0.29%)</title><rect x="25.7339%" y="261" width="0.2851%" height="15" fill="rgb(251,222,45)" fg:x="66786" fg:w="740"/><text x="25.9839%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (86 samples, 0.03%)</title><rect x="26.0191%" y="261" width="0.0331%" height="15" fill="rgb(217,162,53)" fg:x="67526" fg:w="86"/><text x="26.2691%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (86 samples, 0.03%)</title><rect x="26.0191%" y="245" width="0.0331%" height="15" fill="rgb(229,93,14)" fg:x="67526" fg:w="86"/><text x="26.2691%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (86 samples, 0.03%)</title><rect x="26.0191%" y="229" width="0.0331%" height="15" fill="rgb(209,67,49)" fg:x="67526" fg:w="86"/><text x="26.2691%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (491 samples, 0.19%)</title><rect x="26.0522%" y="261" width="0.1892%" height="15" fill="rgb(213,87,29)" fg:x="67612" fg:w="491"/><text x="26.3022%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (491 samples, 0.19%)</title><rect x="26.0522%" y="245" width="0.1892%" height="15" fill="rgb(205,151,52)" fg:x="67612" fg:w="491"/><text x="26.3022%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (8,505 samples, 3.28%)</title><rect x="23.0113%" y="293" width="3.2771%" height="15" fill="rgb(253,215,39)" fg:x="59720" fg:w="8505"/><text x="23.2613%" y="303.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (4,071 samples, 1.57%)</title><rect x="24.7198%" y="277" width="1.5686%" height="15" fill="rgb(221,220,41)" fg:x="64154" fg:w="4071"/><text x="24.9698%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (122 samples, 0.05%)</title><rect x="26.2414%" y="261" width="0.0470%" height="15" fill="rgb(218,133,21)" fg:x="68103" fg:w="122"/><text x="26.4914%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (122 samples, 0.05%)</title><rect x="26.2414%" y="245" width="0.0470%" height="15" fill="rgb(221,193,43)" fg:x="68103" fg:w="122"/><text x="26.4914%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (122 samples, 0.05%)</title><rect x="26.2414%" y="229" width="0.0470%" height="15" fill="rgb(240,128,52)" fg:x="68103" fg:w="122"/><text x="26.4914%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (135 samples, 0.05%)</title><rect x="26.2892%" y="277" width="0.0520%" height="15" fill="rgb(253,114,12)" fg:x="68227" fg:w="135"/><text x="26.5392%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (135 samples, 0.05%)</title><rect x="26.2892%" y="261" width="0.0520%" height="15" fill="rgb(215,223,47)" fg:x="68227" fg:w="135"/><text x="26.5392%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (135 samples, 0.05%)</title><rect x="26.2892%" y="245" width="0.0520%" height="15" fill="rgb(248,225,23)" fg:x="68227" fg:w="135"/><text x="26.5392%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (135 samples, 0.05%)</title><rect x="26.2892%" y="229" width="0.0520%" height="15" fill="rgb(250,108,0)" fg:x="68227" fg:w="135"/><text x="26.5392%" y="239.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (56 samples, 0.02%)</title><rect x="26.4452%" y="261" width="0.0216%" height="15" fill="rgb(228,208,7)" fg:x="68632" fg:w="56"/><text x="26.6952%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (157 samples, 0.06%)</title><rect x="26.4668%" y="261" width="0.0605%" height="15" fill="rgb(244,45,10)" fg:x="68688" fg:w="157"/><text x="26.7168%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (157 samples, 0.06%)</title><rect x="26.4668%" y="245" width="0.0605%" height="15" fill="rgb(207,125,25)" fg:x="68688" fg:w="157"/><text x="26.7168%" y="255.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (10,542 samples, 4.06%)</title><rect x="22.4657%" y="341" width="4.0620%" height="15" fill="rgb(210,195,18)" fg:x="58304" fg:w="10542"/><text x="22.7157%" y="351.50">std:..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (10,542 samples, 4.06%)</title><rect x="22.4657%" y="325" width="4.0620%" height="15" fill="rgb(249,80,12)" fg:x="58304" fg:w="10542"/><text x="22.7157%" y="335.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10,208 samples, 3.93%)</title><rect x="22.5944%" y="309" width="3.9333%" height="15" fill="rgb(221,65,9)" fg:x="58638" fg:w="10208"/><text x="22.8444%" y="319.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (621 samples, 0.24%)</title><rect x="26.2884%" y="293" width="0.2393%" height="15" fill="rgb(235,49,36)" fg:x="68225" fg:w="621"/><text x="26.5384%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (484 samples, 0.19%)</title><rect x="26.3412%" y="277" width="0.1865%" height="15" fill="rgb(225,32,20)" fg:x="68362" fg:w="484"/><text x="26.5912%" y="287.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (53 samples, 0.02%)</title><rect x="96.8292%" y="277" width="0.0204%" height="15" fill="rgb(215,141,46)" fg:x="251296" fg:w="53"/><text x="97.0792%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (53 samples, 0.02%)</title><rect x="96.8292%" y="261" width="0.0204%" height="15" fill="rgb(250,160,47)" fg:x="251296" fg:w="53"/><text x="97.0792%" y="271.50"></text></g><g><title>&lt;vecnn::distance::SquaredDiffSum as vecnn::distance::DistanceT&gt;::distance (182,488 samples, 70.32%)</title><rect x="26.5339%" y="325" width="70.3162%" height="15" fill="rgb(216,222,40)" fg:x="68862" fg:w="182488"/><text x="26.7839%" y="335.50">&lt;vecnn::distance::SquaredDiffSum as vecnn::distance::DistanceT&gt;::distance</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (23,404 samples, 9.02%)</title><rect x="87.8320%" y="309" width="9.0180%" height="15" fill="rgb(234,217,39)" fg:x="227946" fg:w="23404"/><text x="88.0820%" y="319.50">core::iter::r..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (23,404 samples, 9.02%)</title><rect x="87.8320%" y="293" width="9.0180%" height="15" fill="rgb(207,178,40)" fg:x="227946" fg:w="23404"/><text x="88.0820%" y="303.50">&lt;core::ops::r..</text></g><g><title>vecnn::distance::DistanceTracker::distance (185,483 samples, 71.47%)</title><rect x="26.5277%" y="341" width="71.4702%" height="15" fill="rgb(221,136,13)" fg:x="68846" fg:w="185483"/><text x="26.7777%" y="351.50">vecnn::distance::DistanceTracker::distance</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2,979 samples, 1.15%)</title><rect x="96.8500%" y="325" width="1.1479%" height="15" fill="rgb(249,199,10)" fg:x="251350" fg:w="2979"/><text x="97.1000%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_add (2,979 samples, 1.15%)</title><rect x="96.8500%" y="309" width="1.1479%" height="15" fill="rgb(249,222,13)" fg:x="251350" fg:w="2979"/><text x="97.1000%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (65 samples, 0.03%)</title><rect x="98.0326%" y="293" width="0.0250%" height="15" fill="rgb(244,185,38)" fg:x="254419" fg:w="65"/><text x="98.2826%" y="303.50"></text></g><g><title>core::cmp::PartialOrd::le (36 samples, 0.01%)</title><rect x="98.0437%" y="277" width="0.0139%" height="15" fill="rgb(236,202,9)" fg:x="254448" fg:w="36"/><text x="98.2937%" y="287.50"></text></g><g><title>&lt;vecnn::hnsw::DistAnd&lt;T&gt; as core::cmp::PartialOrd&gt;::partial_cmp (29 samples, 0.01%)</title><rect x="98.0464%" y="261" width="0.0112%" height="15" fill="rgb(250,229,37)" fg:x="254455" fg:w="29"/><text x="98.2964%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::partial_cmp (29 samples, 0.01%)</title><rect x="98.0464%" y="245" width="0.0112%" height="15" fill="rgb(206,174,23)" fg:x="254455" fg:w="29"/><text x="98.2964%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (158 samples, 0.06%)</title><rect x="98.0033%" y="309" width="0.0609%" height="15" fill="rgb(211,33,43)" fg:x="254343" fg:w="158"/><text x="98.2533%" y="319.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::push (185 samples, 0.07%)</title><rect x="98.0025%" y="325" width="0.0713%" height="15" fill="rgb(245,58,50)" fg:x="254341" fg:w="185"/><text x="98.2525%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (49 samples, 0.02%)</title><rect x="98.0815%" y="277" width="0.0189%" height="15" fill="rgb(244,68,36)" fg:x="254546" fg:w="49"/><text x="98.3315%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (43 samples, 0.02%)</title><rect x="98.0838%" y="261" width="0.0166%" height="15" fill="rgb(232,229,15)" fg:x="254552" fg:w="43"/><text x="98.3338%" y="271.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (83 samples, 0.03%)</title><rect x="98.0757%" y="325" width="0.0320%" height="15" fill="rgb(254,30,23)" fg:x="254531" fg:w="83"/><text x="98.3257%" y="335.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (83 samples, 0.03%)</title><rect x="98.0757%" y="309" width="0.0320%" height="15" fill="rgb(235,160,14)" fg:x="254531" fg:w="83"/><text x="98.3257%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (80 samples, 0.03%)</title><rect x="98.0769%" y="293" width="0.0308%" height="15" fill="rgb(212,155,44)" fg:x="254534" fg:w="80"/><text x="98.3269%" y="303.50"></text></g><g><title>&lt;vecnn::distance::SquaredDiffSum as vecnn::distance::DistanceT&gt;::distance (4,302 samples, 1.66%)</title><rect x="98.1312%" y="293" width="1.6576%" height="15" fill="rgb(226,2,50)" fg:x="254675" fg:w="4302"/><text x="98.3812%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (522 samples, 0.20%)</title><rect x="99.5877%" y="277" width="0.2011%" height="15" fill="rgb(234,177,6)" fg:x="258455" fg:w="522"/><text x="99.8377%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (522 samples, 0.20%)</title><rect x="99.5877%" y="261" width="0.2011%" height="15" fill="rgb(217,24,9)" fg:x="258455" fg:w="522"/><text x="99.8377%" y="271.50"></text></g><g><title>vecnn::hnsw::closests_points_in_layer (211,262 samples, 81.40%)</title><rect x="18.4144%" y="357" width="81.4033%" height="15" fill="rgb(220,13,46)" fg:x="47790" fg:w="211262"/><text x="18.6644%" y="367.50">vecnn::hnsw::closests_points_in_layer</text></g><g><title>vecnn::hnsw::SearchBuffers::initialize (4,723 samples, 1.82%)</title><rect x="97.9979%" y="341" width="1.8199%" height="15" fill="rgb(239,221,27)" fg:x="254329" fg:w="4723"/><text x="98.2479%" y="351.50">v..</text></g><g><title>vecnn::hnsw::closests_points_in_layer::_{{closure}} (4,438 samples, 1.71%)</title><rect x="98.1077%" y="325" width="1.7100%" height="15" fill="rgb(222,198,25)" fg:x="254614" fg:w="4438"/><text x="98.3577%" y="335.50"></text></g><g><title>vecnn::distance::DistanceTracker::distance (4,379 samples, 1.69%)</title><rect x="98.1304%" y="309" width="1.6873%" height="15" fill="rgb(211,99,13)" fg:x="254673" fg:w="4379"/><text x="98.3804%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (75 samples, 0.03%)</title><rect x="99.7888%" y="293" width="0.0289%" height="15" fill="rgb(232,111,31)" fg:x="258977" fg:w="75"/><text x="100.0388%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_add (75 samples, 0.03%)</title><rect x="99.7888%" y="277" width="0.0289%" height="15" fill="rgb(245,82,37)" fg:x="258977" fg:w="75"/><text x="100.0388%" y="287.50"></text></g><g><title>vecnn::hnsw::pick_level (102 samples, 0.04%)</title><rect x="99.8177%" y="357" width="0.0393%" height="15" fill="rgb(227,149,46)" fg:x="259052" fg:w="102"/><text x="100.0677%" y="367.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::ln (45 samples, 0.02%)</title><rect x="99.8397%" y="341" width="0.0173%" height="15" fill="rgb(218,36,50)" fg:x="259109" fg:w="45"/><text x="100.0897%" y="351.50"></text></g><g><title>[libm.so.6] (45 samples, 0.02%)</title><rect x="99.8397%" y="325" width="0.0173%" height="15" fill="rgb(226,80,48)" fg:x="259109" fg:w="45"/><text x="100.0897%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (205 samples, 0.08%)</title><rect x="99.8917%" y="277" width="0.0790%" height="15" fill="rgb(238,224,15)" fg:x="259244" fg:w="205"/><text x="100.1417%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (205 samples, 0.08%)</title><rect x="99.8917%" y="261" width="0.0790%" height="15" fill="rgb(241,136,10)" fg:x="259244" fg:w="205"/><text x="100.1417%" y="271.50"></text></g><g><title>alloc::alloc::realloc (205 samples, 0.08%)</title><rect x="99.8917%" y="245" width="0.0790%" height="15" fill="rgb(208,32,45)" fg:x="259244" fg:w="205"/><text x="100.1417%" y="255.50"></text></g><g><title>realloc (195 samples, 0.08%)</title><rect x="99.8956%" y="229" width="0.0751%" height="15" fill="rgb(207,135,9)" fg:x="259254" fg:w="195"/><text x="100.1456%" y="239.50"></text></g><g><title>[libc.so.6] (176 samples, 0.07%)</title><rect x="99.9029%" y="213" width="0.0678%" height="15" fill="rgb(206,86,44)" fg:x="259273" fg:w="176"/><text x="100.1529%" y="223.50"></text></g><g><title>[libc.so.6] (148 samples, 0.06%)</title><rect x="99.9137%" y="197" width="0.0570%" height="15" fill="rgb(245,177,15)" fg:x="259301" fg:w="148"/><text x="100.1637%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (241 samples, 0.09%)</title><rect x="99.8883%" y="293" width="0.0929%" height="15" fill="rgb(206,64,50)" fg:x="259235" fg:w="241"/><text x="100.1383%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (264 samples, 0.10%)</title><rect x="99.8825%" y="325" width="0.1017%" height="15" fill="rgb(234,36,40)" fg:x="259220" fg:w="264"/><text x="100.1325%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (264 samples, 0.10%)</title><rect x="99.8825%" y="309" width="0.1017%" height="15" fill="rgb(213,64,8)" fg:x="259220" fg:w="264"/><text x="100.1325%" y="319.50"></text></g><g><title>vecnn::hnsw::Hnsw::new (256,906 samples, 98.99%)</title><rect x="1.0076%" y="405" width="98.9908%" height="15" fill="rgb(210,75,36)" fg:x="2615" fg:w="256906"/><text x="1.2576%" y="415.50">vecnn::hnsw::Hnsw::new</text></g><g><title>vecnn::hnsw::construct_hnsw (256,906 samples, 98.99%)</title><rect x="1.0076%" y="389" width="98.9908%" height="15" fill="rgb(229,88,21)" fg:x="2615" fg:w="256906"/><text x="1.2576%" y="399.50">vecnn::hnsw::construct_hnsw</text></g><g><title>vecnn::hnsw::insert (256,904 samples, 98.99%)</title><rect x="1.0084%" y="373" width="98.9901%" height="15" fill="rgb(252,204,47)" fg:x="2617" fg:w="256904"/><text x="1.2584%" y="383.50">vecnn::hnsw::insert</text></g><g><title>vecnn::hnsw::select_neighbors (367 samples, 0.14%)</title><rect x="99.8570%" y="357" width="0.1414%" height="15" fill="rgb(208,77,27)" fg:x="259154" fg:w="367"/><text x="100.1070%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (323 samples, 0.12%)</title><rect x="99.8740%" y="341" width="0.1245%" height="15" fill="rgb(221,76,26)" fg:x="259198" fg:w="323"/><text x="100.1240%" y="351.50"></text></g><g><title>core::ptr::write (30 samples, 0.01%)</title><rect x="99.9869%" y="325" width="0.0116%" height="15" fill="rgb(225,139,18)" fg:x="259491" fg:w="30"/><text x="100.2369%" y="335.50"></text></g><g><title>_start (256,908 samples, 98.99%)</title><rect x="1.0072%" y="677" width="98.9916%" height="15" fill="rgb(230,137,11)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="687.50">_start</text></g><g><title>__libc_start_main (256,908 samples, 98.99%)</title><rect x="1.0072%" y="661" width="98.9916%" height="15" fill="rgb(212,28,1)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="671.50">__libc_start_main</text></g><g><title>[libc.so.6] (256,908 samples, 98.99%)</title><rect x="1.0072%" y="645" width="98.9916%" height="15" fill="rgb(248,164,17)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="655.50">[libc.so.6]</text></g><g><title>main (256,908 samples, 98.99%)</title><rect x="1.0072%" y="629" width="98.9916%" height="15" fill="rgb(222,171,42)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="639.50">main</text></g><g><title>std::rt::lang_start_internal (256,908 samples, 98.99%)</title><rect x="1.0072%" y="613" width="98.9916%" height="15" fill="rgb(243,84,45)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="623.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (256,908 samples, 98.99%)</title><rect x="1.0072%" y="597" width="98.9916%" height="15" fill="rgb(252,49,23)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (256,908 samples, 98.99%)</title><rect x="1.0072%" y="581" width="98.9916%" height="15" fill="rgb(215,19,7)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (256,908 samples, 98.99%)</title><rect x="1.0072%" y="565" width="98.9916%" height="15" fill="rgb(238,81,41)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="575.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (256,908 samples, 98.99%)</title><rect x="1.0072%" y="549" width="98.9916%" height="15" fill="rgb(210,199,37)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="559.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (256,908 samples, 98.99%)</title><rect x="1.0072%" y="533" width="98.9916%" height="15" fill="rgb(244,192,49)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (256,908 samples, 98.99%)</title><rect x="1.0072%" y="517" width="98.9916%" height="15" fill="rgb(226,211,11)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (256,908 samples, 98.99%)</title><rect x="1.0072%" y="501" width="98.9916%" height="15" fill="rgb(236,162,54)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="511.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (256,908 samples, 98.99%)</title><rect x="1.0072%" y="485" width="98.9916%" height="15" fill="rgb(220,229,9)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="495.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (256,908 samples, 98.99%)</title><rect x="1.0072%" y="469" width="98.9916%" height="15" fill="rgb(250,87,22)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="479.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (256,908 samples, 98.99%)</title><rect x="1.0072%" y="453" width="98.9916%" height="15" fill="rgb(239,43,17)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (256,908 samples, 98.99%)</title><rect x="1.0072%" y="437" width="98.9916%" height="15" fill="rgb(231,177,25)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>construct_hnsw::main (256,908 samples, 98.99%)</title><rect x="1.0072%" y="421" width="98.9916%" height="15" fill="rgb(219,179,1)" fg:x="2614" fg:w="256908"/><text x="1.2572%" y="431.50">construct_hnsw::main</text></g><g><title>all (259,525 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="259525"/><text x="0.2500%" y="719.50"></text></g><g><title>construct_hnsw (259,525 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="259525"/><text x="0.2500%" y="703.50">construct_hnsw</text></g></svg></svg>