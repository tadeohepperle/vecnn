<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="28771"><g><title>&lt;vecnn::dataset::FlatDataSet as vecnn::dataset::DatasetT&gt;::get (5 samples, 0.02%)</title><rect x="0.0000%" y="357" width="0.0174%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="367.50"></text></g><g><title>[[stack]] (5 samples, 0.02%)</title><rect x="0.0174%" y="357" width="0.0174%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="5"/><text x="0.2674%" y="367.50"></text></g><g><title>&lt;vecnn::dataset::FlatDataSet as vecnn::dataset::DatasetT&gt;::get (12 samples, 0.04%)</title><rect x="0.0348%" y="341" width="0.0417%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="12"/><text x="0.2848%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1,618 samples, 5.62%)</title><rect x="0.0765%" y="341" width="5.6237%" height="15" fill="rgb(248,212,6)" fg:x="22" fg:w="1618"/><text x="0.3265%" y="351.50">core::o..</text></g><g><title>vecnn::distance::l2 (14 samples, 0.05%)</title><rect x="5.7037%" y="341" width="0.0487%" height="15" fill="rgb(208,68,35)" fg:x="1641" fg:w="14"/><text x="5.9537%" y="351.50"></text></g><g><title>[anon] (1,663 samples, 5.78%)</title><rect x="0.0348%" y="357" width="5.7801%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="1663"/><text x="0.2848%" y="367.50">[anon]</text></g><g><title>vecnn::utils::binary_heap::SliceBinaryHeap&lt;T&gt;::insert_if_better (18 samples, 0.06%)</title><rect x="5.7523%" y="341" width="0.0626%" height="15" fill="rgb(207,160,47)" fg:x="1655" fg:w="18"/><text x="6.0023%" y="351.50"></text></g><g><title>&lt;vecnn::dataset::FlatDataSet as vecnn::dataset::DatasetT&gt;::get (17 samples, 0.06%)</title><rect x="5.8149%" y="341" width="0.0591%" height="15" fill="rgb(228,23,34)" fg:x="1673" fg:w="17"/><text x="6.0649%" y="351.50"></text></g><g><title>vecnn::distance::l2 (7 samples, 0.02%)</title><rect x="5.8740%" y="341" width="0.0243%" height="15" fill="rgb(218,30,26)" fg:x="1690" fg:w="7"/><text x="6.1240%" y="351.50"></text></g><g><title>[construct] (45 samples, 0.16%)</title><rect x="5.8149%" y="357" width="0.1564%" height="15" fill="rgb(220,122,19)" fg:x="1673" fg:w="45"/><text x="6.0649%" y="367.50"></text></g><g><title>vecnn::utils::binary_heap::SliceBinaryHeap&lt;T&gt;::insert_if_better (21 samples, 0.07%)</title><rect x="5.8983%" y="341" width="0.0730%" height="15" fill="rgb(250,228,42)" fg:x="1697" fg:w="21"/><text x="6.1483%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.02%)</title><rect x="5.9713%" y="357" width="0.0174%" height="15" fill="rgb(240,193,28)" fg:x="1718" fg:w="5"/><text x="6.2213%" y="367.50"></text></g><g><title>&lt;vecnn::dataset::FlatDataSet as vecnn::dataset::DatasetT&gt;::get (3 samples, 0.01%)</title><rect x="7.1843%" y="101" width="0.0104%" height="15" fill="rgb(216,20,37)" fg:x="2067" fg:w="3"/><text x="7.4343%" y="111.50"></text></g><g><title>vecnn::distance::l2 (745 samples, 2.59%)</title><rect x="7.1947%" y="101" width="2.5894%" height="15" fill="rgb(206,188,39)" fg:x="2070" fg:w="745"/><text x="7.4447%" y="111.50">ve..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17hbcf4023fe64bd28dE.llvm.1158554439447639480 (1,115 samples, 3.88%)</title><rect x="6.0095%" y="149" width="3.8754%" height="15" fill="rgb(217,207,13)" fg:x="1729" fg:w="1115"/><text x="6.2595%" y="159.50">_ZN1..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,115 samples, 3.88%)</title><rect x="6.0095%" y="133" width="3.8754%" height="15" fill="rgb(231,73,38)" fg:x="1729" fg:w="1115"/><text x="6.2595%" y="143.50">rayo..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1,115 samples, 3.88%)</title><rect x="6.0095%" y="117" width="3.8754%" height="15" fill="rgb(225,20,46)" fg:x="1729" fg:w="1115"/><text x="6.2595%" y="127.50">core..</text></g><g><title>vecnn::utils::binary_heap::SliceBinaryHeap&lt;T&gt;::insert_if_better (29 samples, 0.10%)</title><rect x="9.7842%" y="101" width="0.1008%" height="15" fill="rgb(210,31,41)" fg:x="2815" fg:w="29"/><text x="10.0342%" y="111.50"></text></g><g><title>&lt;vecnn::dataset::FlatDataSet as vecnn::dataset::DatasetT&gt;::get (30 samples, 0.10%)</title><rect x="14.0141%" y="133" width="0.1043%" height="15" fill="rgb(221,200,47)" fg:x="4032" fg:w="30"/><text x="14.2641%" y="143.50"></text></g><g><title>vecnn::distance::l2 (3,481 samples, 12.10%)</title><rect x="14.1184%" y="133" width="12.0990%" height="15" fill="rgb(226,26,5)" fg:x="4062" fg:w="3481"/><text x="14.3684%" y="143.50">vecnn::distance::l2</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17hbcf4023fe64bd28dE.llvm.1158554439447639480 (5,901 samples, 20.51%)</title><rect x="6.0095%" y="181" width="20.5102%" height="15" fill="rgb(249,33,26)" fg:x="1729" fg:w="5901"/><text x="6.2595%" y="191.50">_ZN10rayon_core4join12join_conte..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (5,901 samples, 20.51%)</title><rect x="6.0095%" y="165" width="20.5102%" height="15" fill="rgb(235,183,28)" fg:x="1729" fg:w="5901"/><text x="6.2595%" y="175.50">rayon::iter::plumbing::bridge_pr..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (4,786 samples, 16.63%)</title><rect x="9.8850%" y="149" width="16.6348%" height="15" fill="rgb(221,5,38)" fg:x="2844" fg:w="4786"/><text x="10.1350%" y="159.50">core::ops::function::impls..</text></g><g><title>vecnn::utils::binary_heap::SliceBinaryHeap&lt;T&gt;::insert_if_better (87 samples, 0.30%)</title><rect x="26.2174%" y="133" width="0.3024%" height="15" fill="rgb(247,18,42)" fg:x="7543" fg:w="87"/><text x="26.4674%" y="143.50"></text></g><g><title>&lt;vecnn::dataset::FlatDataSet as vecnn::dataset::DatasetT&gt;::get (35 samples, 0.12%)</title><rect x="32.2756%" y="165" width="0.1217%" height="15" fill="rgb(241,131,45)" fg:x="9286" fg:w="35"/><text x="32.5256%" y="175.50"></text></g><g><title>vecnn::distance::l2 (4,889 samples, 16.99%)</title><rect x="32.3972%" y="165" width="16.9928%" height="15" fill="rgb(249,31,29)" fg:x="9321" fg:w="4889"/><text x="32.6472%" y="175.50">vecnn::distance::l2</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17hbcf4023fe64bd28dE.llvm.1158554439447639480 (12,613 samples, 43.84%)</title><rect x="6.0095%" y="213" width="43.8393%" height="15" fill="rgb(225,111,53)" fg:x="1729" fg:w="12613"/><text x="6.2595%" y="223.50">_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17hbcf40..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (12,613 samples, 43.84%)</title><rect x="6.0095%" y="197" width="43.8393%" height="15" fill="rgb(238,160,17)" fg:x="1729" fg:w="12613"/><text x="6.2595%" y="207.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (6,712 samples, 23.33%)</title><rect x="26.5198%" y="181" width="23.3290%" height="15" fill="rgb(214,148,48)" fg:x="7630" fg:w="6712"/><text x="26.7698%" y="191.50">core::ops::function::impls::&lt;impl cor..</text></g><g><title>vecnn::utils::binary_heap::SliceBinaryHeap&lt;T&gt;::insert_if_better (132 samples, 0.46%)</title><rect x="49.3900%" y="165" width="0.4588%" height="15" fill="rgb(232,36,49)" fg:x="14210" fg:w="132"/><text x="49.6400%" y="175.50"></text></g><g><title>&lt;vecnn::dataset::FlatDataSet as vecnn::dataset::DatasetT&gt;::get (48 samples, 0.17%)</title><rect x="59.5634%" y="197" width="0.1668%" height="15" fill="rgb(209,103,24)" fg:x="17137" fg:w="48"/><text x="59.8134%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.02%)</title><rect x="59.7303%" y="197" width="0.0174%" height="15" fill="rgb(229,88,8)" fg:x="17185" fg:w="5"/><text x="59.9803%" y="207.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17hed2799e90839476eE.llvm.6213881337385188473 (5 samples, 0.02%)</title><rect x="59.7303%" y="181" width="0.0174%" height="15" fill="rgb(213,181,19)" fg:x="17185" fg:w="5"/><text x="59.9803%" y="191.50"></text></g><g><title>malloc (5 samples, 0.02%)</title><rect x="59.7303%" y="165" width="0.0174%" height="15" fill="rgb(254,191,54)" fg:x="17185" fg:w="5"/><text x="59.9803%" y="175.50"></text></g><g><title>[libc.so.6] (5 samples, 0.02%)</title><rect x="59.7303%" y="149" width="0.0174%" height="15" fill="rgb(241,83,37)" fg:x="17185" fg:w="5"/><text x="59.9803%" y="159.50"></text></g><g><title>[libc.so.6] (5 samples, 0.02%)</title><rect x="59.7303%" y="133" width="0.0174%" height="15" fill="rgb(233,36,39)" fg:x="17185" fg:w="5"/><text x="59.9803%" y="143.50"></text></g><g><title>[libc.so.6] (5 samples, 0.02%)</title><rect x="59.7303%" y="117" width="0.0174%" height="15" fill="rgb(226,3,54)" fg:x="17185" fg:w="5"/><text x="59.9803%" y="127.50"></text></g><g><title>vecnn::distance::l2 (7,549 samples, 26.24%)</title><rect x="59.7477%" y="197" width="26.2382%" height="15" fill="rgb(245,192,40)" fg:x="17190" fg:w="7549"/><text x="59.9977%" y="207.50">vecnn::distance::l2</text></g><g><title>vecnn::utils::binary_heap::SliceBinaryHeap&lt;T&gt;::insert_if_better (233 samples, 0.81%)</title><rect x="85.9859%" y="197" width="0.8098%" height="15" fill="rgb(238,167,29)" fg:x="24739" fg:w="233"/><text x="86.2359%" y="207.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (23,253 samples, 80.82%)</title><rect x="6.0095%" y="245" width="80.8210%" height="15" fill="rgb(232,182,51)" fg:x="1729" fg:w="23253"/><text x="6.2595%" y="255.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (23,253 samples, 80.82%)</title><rect x="6.0095%" y="229" width="80.8210%" height="15" fill="rgb(231,60,39)" fg:x="1729" fg:w="23253"/><text x="6.2595%" y="239.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (10,640 samples, 36.98%)</title><rect x="49.8488%" y="213" width="36.9817%" height="15" fill="rgb(208,69,12)" fg:x="14342" fg:w="10640"/><text x="50.0988%" y="223.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut..</text></g><g><title>vecnn::utils::binary_heap::slice_binary_heap_arena (10 samples, 0.03%)</title><rect x="86.7957%" y="197" width="0.0348%" height="15" fill="rgb(235,93,37)" fg:x="24972" fg:w="10"/><text x="87.0457%" y="207.50"></text></g><g><title>malloc (10 samples, 0.03%)</title><rect x="86.7957%" y="181" width="0.0348%" height="15" fill="rgb(213,116,39)" fg:x="24972" fg:w="10"/><text x="87.0457%" y="191.50"></text></g><g><title>[libc.so.6] (10 samples, 0.03%)</title><rect x="86.7957%" y="165" width="0.0348%" height="15" fill="rgb(222,207,29)" fg:x="24972" fg:w="10"/><text x="87.0457%" y="175.50"></text></g><g><title>[libc.so.6] (10 samples, 0.03%)</title><rect x="86.7957%" y="149" width="0.0348%" height="15" fill="rgb(206,96,30)" fg:x="24972" fg:w="10"/><text x="87.0457%" y="159.50"></text></g><g><title>[libc.so.6] (10 samples, 0.03%)</title><rect x="86.7957%" y="133" width="0.0348%" height="15" fill="rgb(218,138,4)" fg:x="24972" fg:w="10"/><text x="87.0457%" y="143.50"></text></g><g><title>__mmap (9 samples, 0.03%)</title><rect x="86.7992%" y="117" width="0.0313%" height="15" fill="rgb(250,191,14)" fg:x="24973" fg:w="9"/><text x="87.0492%" y="127.50"></text></g><g><title>_ZN10rayon_core8registry12WorkerThread9find_work17h21b35d63c47320dbE.llvm.11986752901764564018 (3 samples, 0.01%)</title><rect x="86.8305%" y="245" width="0.0104%" height="15" fill="rgb(239,60,40)" fg:x="24982" fg:w="3"/><text x="87.0805%" y="255.50"></text></g><g><title>&lt;vecnn::dataset::FlatDataSet as vecnn::dataset::DatasetT&gt;::get (10 samples, 0.03%)</title><rect x="88.5892%" y="85" width="0.0348%" height="15" fill="rgb(206,27,48)" fg:x="25488" fg:w="10"/><text x="88.8392%" y="95.50"></text></g><g><title>vecnn::distance::l2 (1,465 samples, 5.09%)</title><rect x="88.6274%" y="85" width="5.0919%" height="15" fill="rgb(225,35,8)" fg:x="25499" fg:w="1465"/><text x="88.8774%" y="95.50">vecnn:..</text></g><g><title>_ZN83_$LT$rayon_core..job..StackJob$LT$L$C$F$C$R$GT$$u20$as$u20$rayon_core..job..Job$GT$7execute17h2391643e91a472dcE.llvm.1158554439447639480 (2,014 samples, 7.00%)</title><rect x="86.8409%" y="245" width="7.0001%" height="15" fill="rgb(250,213,24)" fg:x="24985" fg:w="2014"/><text x="87.0909%" y="255.50">_ZN83_$LT..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17hbcf4023fe64bd28dE.llvm.1158554439447639480 (2,014 samples, 7.00%)</title><rect x="86.8409%" y="229" width="7.0001%" height="15" fill="rgb(247,123,22)" fg:x="24985" fg:w="2014"/><text x="87.0909%" y="239.50">_ZN10rayo..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,014 samples, 7.00%)</title><rect x="86.8409%" y="213" width="7.0001%" height="15" fill="rgb(231,138,38)" fg:x="24985" fg:w="2014"/><text x="87.0909%" y="223.50">rayon::it..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17hbcf4023fe64bd28dE.llvm.1158554439447639480 (2,014 samples, 7.00%)</title><rect x="86.8409%" y="197" width="7.0001%" height="15" fill="rgb(231,145,46)" fg:x="24985" fg:w="2014"/><text x="87.0909%" y="207.50">_ZN10rayo..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,014 samples, 7.00%)</title><rect x="86.8409%" y="181" width="7.0001%" height="15" fill="rgb(251,118,11)" fg:x="24985" fg:w="2014"/><text x="87.0909%" y="191.50">rayon::it..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17hbcf4023fe64bd28dE.llvm.1158554439447639480 (2,014 samples, 7.00%)</title><rect x="86.8409%" y="165" width="7.0001%" height="15" fill="rgb(217,147,25)" fg:x="24985" fg:w="2014"/><text x="87.0909%" y="175.50">_ZN10rayo..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,014 samples, 7.00%)</title><rect x="86.8409%" y="149" width="7.0001%" height="15" fill="rgb(247,81,37)" fg:x="24985" fg:w="2014"/><text x="87.0909%" y="159.50">rayon::it..</text></g><g><title>_ZN10rayon_core4join12join_context28_$u7b$$u7b$closure$u7d$$u7d$17hbcf4023fe64bd28dE.llvm.1158554439447639480 (2,014 samples, 7.00%)</title><rect x="86.8409%" y="133" width="7.0001%" height="15" fill="rgb(209,12,38)" fg:x="24985" fg:w="2014"/><text x="87.0909%" y="143.50">_ZN10rayo..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,014 samples, 7.00%)</title><rect x="86.8409%" y="117" width="7.0001%" height="15" fill="rgb(227,1,9)" fg:x="24985" fg:w="2014"/><text x="87.0909%" y="127.50">rayon::it..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (2,014 samples, 7.00%)</title><rect x="86.8409%" y="101" width="7.0001%" height="15" fill="rgb(248,47,43)" fg:x="24985" fg:w="2014"/><text x="87.0909%" y="111.50">core::ops..</text></g><g><title>vecnn::utils::binary_heap::SliceBinaryHeap&lt;T&gt;::insert_if_better (35 samples, 0.12%)</title><rect x="93.7194%" y="85" width="0.1217%" height="15" fill="rgb(221,10,30)" fg:x="26964" fg:w="35"/><text x="93.9694%" y="95.50"></text></g><g><title>__sched_yield (4 samples, 0.01%)</title><rect x="93.8410%" y="245" width="0.0139%" height="15" fill="rgb(210,229,1)" fg:x="26999" fg:w="4"/><text x="94.0910%" y="255.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (5 samples, 0.02%)</title><rect x="93.8549%" y="245" width="0.0174%" height="15" fill="rgb(222,148,37)" fg:x="27003" fg:w="5"/><text x="94.1049%" y="255.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::initialize (5 samples, 0.02%)</title><rect x="93.8549%" y="229" width="0.0174%" height="15" fill="rgb(234,67,33)" fg:x="27003" fg:w="5"/><text x="94.1049%" y="239.50"></text></g><g><title>crossbeam_epoch::collector::Collector::register (5 samples, 0.02%)</title><rect x="93.8549%" y="213" width="0.0174%" height="15" fill="rgb(247,98,35)" fg:x="27003" fg:w="5"/><text x="94.1049%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (25,306 samples, 87.96%)</title><rect x="6.0060%" y="309" width="87.9566%" height="15" fill="rgb(247,138,52)" fg:x="1728" fg:w="25306"/><text x="6.2560%" y="319.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (25,306 samples, 87.96%)</title><rect x="6.0060%" y="293" width="87.9566%" height="15" fill="rgb(213,79,30)" fg:x="1728" fg:w="25306"/><text x="6.2560%" y="303.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rayon_core::registry::ThreadBuilder::run (25,306 samples, 87.96%)</title><rect x="6.0060%" y="277" width="87.9566%" height="15" fill="rgb(246,177,23)" fg:x="1728" fg:w="25306"/><text x="6.2560%" y="287.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (25,306 samples, 87.96%)</title><rect x="6.0060%" y="261" width="87.9566%" height="15" fill="rgb(230,62,27)" fg:x="1728" fg:w="25306"/><text x="6.2560%" y="271.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>rayon_core::sleep::Sleep::sleep (26 samples, 0.09%)</title><rect x="93.8723%" y="245" width="0.0904%" height="15" fill="rgb(216,154,8)" fg:x="27008" fg:w="26"/><text x="94.1223%" y="255.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (26 samples, 0.09%)</title><rect x="93.8723%" y="229" width="0.0904%" height="15" fill="rgb(244,35,45)" fg:x="27008" fg:w="26"/><text x="94.1223%" y="239.50"></text></g><g><title>syscall (16 samples, 0.06%)</title><rect x="93.9071%" y="213" width="0.0556%" height="15" fill="rgb(251,115,12)" fg:x="27018" fg:w="16"/><text x="94.1571%" y="223.50"></text></g><g><title>[libc.so.6] (25,316 samples, 87.99%)</title><rect x="5.9887%" y="357" width="87.9914%" height="15" fill="rgb(240,54,50)" fg:x="1723" fg:w="25316"/><text x="6.2387%" y="367.50">[libc.so.6]</text></g><g><title>[libc.so.6] (25,314 samples, 87.98%)</title><rect x="5.9956%" y="341" width="87.9844%" height="15" fill="rgb(233,84,52)" fg:x="1725" fg:w="25314"/><text x="6.2456%" y="351.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (25,311 samples, 87.97%)</title><rect x="6.0060%" y="325" width="87.9740%" height="15" fill="rgb(207,117,47)" fg:x="1728" fg:w="25311"/><text x="6.2560%" y="335.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (5 samples, 0.02%)</title><rect x="93.9627%" y="309" width="0.0174%" height="15" fill="rgb(249,43,39)" fg:x="27034" fg:w="5"/><text x="94.2127%" y="319.50"></text></g><g><title>__mmap (4 samples, 0.01%)</title><rect x="93.9661%" y="293" width="0.0139%" height="15" fill="rgb(209,38,44)" fg:x="27035" fg:w="4"/><text x="94.2161%" y="303.50"></text></g><g><title>[unknown] (30 samples, 0.10%)</title><rect x="93.9800%" y="357" width="0.1043%" height="15" fill="rgb(236,212,23)" fg:x="27039" fg:w="30"/><text x="94.2300%" y="367.50"></text></g><g><title>vecnn::vp_tree::arrange_into_vp_tree (7 samples, 0.02%)</title><rect x="94.0600%" y="341" width="0.0243%" height="15" fill="rgb(242,79,21)" fg:x="27062" fg:w="7"/><text x="94.3100%" y="351.50"></text></g><g><title>vecnn::dataset::FlatDataSet::new_random (219 samples, 0.76%)</title><rect x="94.0843%" y="229" width="0.7612%" height="15" fill="rgb(211,96,35)" fg:x="27069" fg:w="219"/><text x="94.3343%" y="239.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (162 samples, 0.56%)</title><rect x="94.2824%" y="213" width="0.5631%" height="15" fill="rgb(253,215,40)" fg:x="27126" fg:w="162"/><text x="94.5324%" y="223.50"></text></g><g><title>&lt;rayon::iter::plumbing::bridge::Callback&lt;C&gt; as rayon::iter::plumbing::ProducerCallback&lt;I&gt;&gt;::callback (5 samples, 0.02%)</title><rect x="94.8455%" y="213" width="0.0174%" height="15" fill="rgb(211,81,21)" fg:x="27288" fg:w="5"/><text x="95.0955%" y="223.50"></text></g><g><title>rayon_core::current_num_threads (5 samples, 0.02%)</title><rect x="94.8455%" y="197" width="0.0174%" height="15" fill="rgb(208,190,38)" fg:x="27288" fg:w="5"/><text x="95.0955%" y="207.50"></text></g><g><title>rayon_core::registry::global_registry (5 samples, 0.02%)</title><rect x="94.8455%" y="181" width="0.0174%" height="15" fill="rgb(235,213,38)" fg:x="27288" fg:w="5"/><text x="95.0955%" y="191.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (5 samples, 0.02%)</title><rect x="94.8455%" y="165" width="0.0174%" height="15" fill="rgb(237,122,38)" fg:x="27288" fg:w="5"/><text x="95.0955%" y="175.50"></text></g><g><title>rayon_core::registry::default_global_registry (5 samples, 0.02%)</title><rect x="94.8455%" y="149" width="0.0174%" height="15" fill="rgb(244,218,35)" fg:x="27288" fg:w="5"/><text x="95.0955%" y="159.50"></text></g><g><title>rayon_core::registry::Registry::new (5 samples, 0.02%)</title><rect x="94.8455%" y="133" width="0.0174%" height="15" fill="rgb(240,68,47)" fg:x="27288" fg:w="5"/><text x="95.0955%" y="143.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn (5 samples, 0.02%)</title><rect x="94.8455%" y="117" width="0.0174%" height="15" fill="rgb(210,16,53)" fg:x="27288" fg:w="5"/><text x="95.0955%" y="127.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (5 samples, 0.02%)</title><rect x="94.8455%" y="101" width="0.0174%" height="15" fill="rgb(235,124,12)" fg:x="27288" fg:w="5"/><text x="95.0955%" y="111.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new (5 samples, 0.02%)</title><rect x="94.8455%" y="85" width="0.0174%" height="15" fill="rgb(224,169,11)" fg:x="27288" fg:w="5"/><text x="95.0955%" y="95.50"></text></g><g><title>pthread_create (5 samples, 0.02%)</title><rect x="94.8455%" y="69" width="0.0174%" height="15" fill="rgb(250,166,2)" fg:x="27288" fg:w="5"/><text x="95.0955%" y="79.50"></text></g><g><title>__mmap (5 samples, 0.02%)</title><rect x="94.8455%" y="53" width="0.0174%" height="15" fill="rgb(242,216,29)" fg:x="27288" fg:w="5"/><text x="95.0955%" y="63.50"></text></g><g><title>vecnn::distance::l2 (236 samples, 0.82%)</title><rect x="94.8942%" y="197" width="0.8203%" height="15" fill="rgb(230,116,27)" fg:x="27302" fg:w="236"/><text x="95.1442%" y="207.50"></text></g><g><title>vecnn::distance::l2 (237 samples, 0.82%)</title><rect x="95.7561%" y="181" width="0.8237%" height="15" fill="rgb(228,99,48)" fg:x="27550" fg:w="237"/><text x="96.0061%" y="191.50"></text></g><g><title>vecnn::distance::l2 (229 samples, 0.80%)</title><rect x="96.6216%" y="165" width="0.7959%" height="15" fill="rgb(253,11,6)" fg:x="27799" fg:w="229"/><text x="96.8716%" y="175.50"></text></g><g><title>vecnn::distance::l2 (182 samples, 0.63%)</title><rect x="97.4558%" y="149" width="0.6326%" height="15" fill="rgb(247,143,39)" fg:x="28039" fg:w="182"/><text x="97.7058%" y="159.50"></text></g><g><title>vecnn::distance::l2 (157 samples, 0.55%)</title><rect x="98.1301%" y="133" width="0.5457%" height="15" fill="rgb(236,97,10)" fg:x="28233" fg:w="157"/><text x="98.3801%" y="143.50"></text></g><g><title>vecnn::distance::l2 (116 samples, 0.40%)</title><rect x="98.7001%" y="117" width="0.4032%" height="15" fill="rgb(233,208,19)" fg:x="28397" fg:w="116"/><text x="98.9501%" y="127.50"></text></g><g><title>vecnn::distance::l2 (87 samples, 0.30%)</title><rect x="99.1276%" y="101" width="0.3024%" height="15" fill="rgb(216,164,2)" fg:x="28520" fg:w="87"/><text x="99.3776%" y="111.50"></text></g><g><title>vecnn::distance::l2 (64 samples, 0.22%)</title><rect x="99.4543%" y="85" width="0.2224%" height="15" fill="rgb(220,129,5)" fg:x="28614" fg:w="64"/><text x="99.7043%" y="95.50"></text></g><g><title>vecnn::distance::l2 (38 samples, 0.13%)</title><rect x="99.6907%" y="69" width="0.1321%" height="15" fill="rgb(242,17,10)" fg:x="28682" fg:w="38"/><text x="99.9407%" y="79.50"></text></g><g><title>vecnn::distance::l2 (25 samples, 0.09%)</title><rect x="99.8332%" y="53" width="0.0869%" height="15" fill="rgb(242,107,0)" fg:x="28723" fg:w="25"/><text x="100.0832%" y="63.50"></text></g><g><title>vecnn::distance::l2 (10 samples, 0.03%)</title><rect x="99.9201%" y="37" width="0.0348%" height="15" fill="rgb(251,28,31)" fg:x="28748" fg:w="10"/><text x="100.1701%" y="47.50"></text></g><g><title>_start (1,690 samples, 5.87%)</title><rect x="94.0843%" y="357" width="5.8740%" height="15" fill="rgb(233,223,10)" fg:x="27069" fg:w="1690"/><text x="94.3343%" y="367.50">_start</text></g><g><title>__libc_start_main (1,690 samples, 5.87%)</title><rect x="94.0843%" y="341" width="5.8740%" height="15" fill="rgb(215,21,27)" fg:x="27069" fg:w="1690"/><text x="94.3343%" y="351.50">__libc_..</text></g><g><title>[libc.so.6] (1,690 samples, 5.87%)</title><rect x="94.0843%" y="325" width="5.8740%" height="15" fill="rgb(232,23,21)" fg:x="27069" fg:w="1690"/><text x="94.3343%" y="335.50">[libc.s..</text></g><g><title>main (1,690 samples, 5.87%)</title><rect x="94.0843%" y="309" width="5.8740%" height="15" fill="rgb(244,5,23)" fg:x="27069" fg:w="1690"/><text x="94.3343%" y="319.50">main</text></g><g><title>std::rt::lang_start_internal (1,690 samples, 5.87%)</title><rect x="94.0843%" y="293" width="5.8740%" height="15" fill="rgb(226,81,46)" fg:x="27069" fg:w="1690"/><text x="94.3343%" y="303.50">std::rt..</text></g><g><title>std::rt::lang_start::_{{closure}} (1,690 samples, 5.87%)</title><rect x="94.0843%" y="277" width="5.8740%" height="15" fill="rgb(247,70,30)" fg:x="27069" fg:w="1690"/><text x="94.3343%" y="287.50">std::rt..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,690 samples, 5.87%)</title><rect x="94.0843%" y="261" width="5.8740%" height="15" fill="rgb(212,68,19)" fg:x="27069" fg:w="1690"/><text x="94.3343%" y="271.50">std::sy..</text></g><g><title>construct::main (1,690 samples, 5.87%)</title><rect x="94.0843%" y="245" width="5.8740%" height="15" fill="rgb(240,187,13)" fg:x="27069" fg:w="1690"/><text x="94.3343%" y="255.50">constru..</text></g><g><title>vecnn::transition::build_hnsw_by_vp_tree_ensemble_multi_layer (1,471 samples, 5.11%)</title><rect x="94.8455%" y="229" width="5.1128%" height="15" fill="rgb(223,113,26)" fg:x="27288" fg:w="1471"/><text x="95.0955%" y="239.50">vecnn:..</text></g><g><title>vecnn::vp_tree::arrange_into_vp_tree (1,466 samples, 5.10%)</title><rect x="94.8629%" y="213" width="5.0954%" height="15" fill="rgb(206,192,2)" fg:x="27293" fg:w="1466"/><text x="95.1129%" y="223.50">vecnn:..</text></g><g><title>vecnn::vp_tree::arrange_into_vp_tree (1,221 samples, 4.24%)</title><rect x="95.7144%" y="197" width="4.2439%" height="15" fill="rgb(241,108,4)" fg:x="27538" fg:w="1221"/><text x="95.9644%" y="207.50">vecnn..</text></g><g><title>vecnn::vp_tree::arrange_into_vp_tree (972 samples, 3.38%)</title><rect x="96.5799%" y="181" width="3.3784%" height="15" fill="rgb(247,173,49)" fg:x="27787" fg:w="972"/><text x="96.8299%" y="191.50">vec..</text></g><g><title>vecnn::vp_tree::arrange_into_vp_tree (731 samples, 2.54%)</title><rect x="97.4175%" y="165" width="2.5408%" height="15" fill="rgb(224,114,35)" fg:x="28028" fg:w="731"/><text x="97.6675%" y="175.50">ve..</text></g><g><title>vecnn::vp_tree::arrange_into_vp_tree (538 samples, 1.87%)</title><rect x="98.0884%" y="149" width="1.8699%" height="15" fill="rgb(245,159,27)" fg:x="28221" fg:w="538"/><text x="98.3384%" y="159.50">v..</text></g><g><title>vecnn::vp_tree::arrange_into_vp_tree (369 samples, 1.28%)</title><rect x="98.6757%" y="133" width="1.2825%" height="15" fill="rgb(245,172,44)" fg:x="28390" fg:w="369"/><text x="98.9257%" y="143.50"></text></g><g><title>vecnn::vp_tree::arrange_into_vp_tree (246 samples, 0.86%)</title><rect x="99.1033%" y="117" width="0.8550%" height="15" fill="rgb(236,23,11)" fg:x="28513" fg:w="246"/><text x="99.3533%" y="127.50"></text></g><g><title>vecnn::vp_tree::arrange_into_vp_tree (152 samples, 0.53%)</title><rect x="99.4300%" y="101" width="0.5283%" height="15" fill="rgb(205,117,38)" fg:x="28607" fg:w="152"/><text x="99.6800%" y="111.50"></text></g><g><title>vecnn::vp_tree::arrange_into_vp_tree (81 samples, 0.28%)</title><rect x="99.6768%" y="85" width="0.2815%" height="15" fill="rgb(237,72,25)" fg:x="28678" fg:w="81"/><text x="99.9268%" y="95.50"></text></g><g><title>vecnn::vp_tree::arrange_into_vp_tree (39 samples, 0.14%)</title><rect x="99.8227%" y="69" width="0.1356%" height="15" fill="rgb(244,70,9)" fg:x="28720" fg:w="39"/><text x="100.0727%" y="79.50"></text></g><g><title>vecnn::vp_tree::arrange_into_vp_tree (11 samples, 0.04%)</title><rect x="99.9201%" y="53" width="0.0382%" height="15" fill="rgb(217,125,39)" fg:x="28748" fg:w="11"/><text x="100.1701%" y="63.50"></text></g><g><title>vecnn::distance::l2 (3 samples, 0.01%)</title><rect x="99.9618%" y="357" width="0.0104%" height="15" fill="rgb(235,36,10)" fg:x="28760" fg:w="3"/><text x="100.2118%" y="367.50"></text></g><g><title>all (28,771 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="28771"/><text x="0.2500%" y="399.50"></text></g><g><title>construct (28,771 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="28771"/><text x="0.2500%" y="383.50">construct</text></g><g><title>vecnn::utils::binary_heap::SliceBinaryHeap&lt;T&gt;::insert_if_better (8 samples, 0.03%)</title><rect x="99.9722%" y="357" width="0.0278%" height="15" fill="rgb(238,131,9)" fg:x="28763" fg:w="8"/><text x="100.2222%" y="367.50"></text></g></svg></svg>