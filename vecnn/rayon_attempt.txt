
// Threadpool idea was slower because work per thread was too small:

// /// after doing this, ctx.found will contain the relevant found points.
// fn closest_points_in_layer_threadpool(
//     entries: &[LayerEntry],
//     data: &dyn DatasetT,
//     q_data: &[f32],
//     ep_idxs_in_layer: &[usize],
//     ef: usize, // max number of found items
//     ctx: &mut SearchCtx,
//     distance: &DistanceTracker,
// ) {
//     // #[cfg(feature = "tracking")]
//     // let mut track_to_idx_from_idx: HashMap<usize, usize> = HashMap::new();
//     ctx.initialize(ep_idxs_in_layer, |idx| {
//         let id = entries[idx ].id;
//         distance.distance(data.get(id ), q_data)
//     });

//     struct IdxInLayerAndDist {}

//     let mut tmp_indices_and_distances: [IAndDist<usize>; MAX_NEIGHBORS] =
//         [IAndDist { i: 0, dist: 0.0 }; MAX_NEIGHBORS];

//     while ctx.candidates.len() > 0 {
//         // tmp_indices_and_distances = UnsafeCell::new([(usize::MAX, 0.0); MAX_NEIGHBORS]); // maybe not necessary

//         let c = ctx.candidates.pop().unwrap(); // remove closest element.
//         let mut f = *ctx.search_res.peek().unwrap();
//         if c.0.dist > f.dist {
//             break; // all elements in found are evaluated (see paper).
//         }
//         let c_entry = &entries[c.0.i ];

//         // compute the distances of all neighbors in parallel:

//         //

//         // Note: checking with this, we see that in 99% of cases the MAX_NEIHGBORS is actually reached.
//         // std::io::stdout().write_fmt(format_args!(" {}\n", c_entry.neighbors.len()));

//         let mut num_unvisited_neighbors: usize = 0;
//         for idx_and_dist in c_entry.neighbors.iter() {
//             let idx_in_layer = idx_and_dist.i;
//             let newly_visited = ctx.visited_idxs.insert(idx_in_layer);
//             if newly_visited {
//                 unsafe {
//                     tmp_indices_and_distances
//                         .get_unchecked_mut(num_unvisited_neighbors)
//                         .i = idx_in_layer;
//                 }
//                 num_unvisited_neighbors += 1;
//             }
//         }
//         let tmp_start = tmp_indices_and_distances.as_mut_ptr();
//         let barrier = Arc::new(Barrier::new(num_unvisited_neighbors + 1));
//         for i in 0..num_unvisited_neighbors {
//             let idx_and_dist_ptr = unsafe { tmp_start.add(i) };
//             let idx = unsafe { *(idx_and_dist_ptr as *mut usize) };
//             let neighbor_id = &entries[idx ].id;

//             let n_data = extend_lifetime(data.get(*neighbor_id ));
//             let q_data = extend_lifetime(q_data);
//             let distance = extend_lifetime(distance);
//             let write_dist_ptr = idx_and_dist_ptr  + std::mem::size_of::<usize>();

//             let barrier = barrier.clone();
//             ctx.thread_pool.execute(move || unsafe {
//                 let write_dist_ptr = write_dist_ptr as *mut f32;
//                 let distance = distance.distance(q_data, n_data);
//                 (write_dist_ptr as *mut f32).write(distance);
//                 barrier.wait();
//             });
//         }
//         barrier.wait();

//         for idx_and_dist in &tmp_indices_and_distances[0..num_unvisited_neighbors] {
//             let i = idx_and_dist.i;
//             let dist = idx_and_dist.dist;
//             f = *ctx.search_res.peek().unwrap();
//             if dist < f.dist || ctx.search_res.len() < ef {
//                 ctx.candidates.push(Reverse(IAndDist { i, dist }));
//                 if ctx.search_res.len() < ef {
//                     ctx.search_res.push(IAndDist { i, dist });
//                 } else {
//                     // compare dist to the currently furthest away,
//                     // if further than this dist, kick it out and insert the new one instead.
//                     if dist < f.dist {
//                         ctx.search_res.pop().unwrap();
//                         ctx.search_res.push(IAndDist { i, dist });
//                     }
//                 }
//             }
//         }
//     }
// }

// /// after doing this, ctx.found will contain the relevant found points.
// fn closest_points_in_layer_rayon(
//     entries: &[LayerEntry],
//     data: &dyn DatasetT,
//     q_data: &[f32],
//     ep_idxs_in_layer: &[usize],
//     ef: usize, // max number of found items
//     ctx: &mut SearchCtx,
//     distance: &DistanceTracker,
// ) {
//     // #[cfg(feature = "tracking")]
//     // let mut track_to_idx_from_idx: HashMap<usize, usize> = HashMap::new();
//     ctx.initialize(ep_idxs_in_layer, |idx| {
//         let id = entries[idx ].id;
//         distance.distance(data.get(id ), q_data)
//     });

//     let mut tmp_num_unvisited_neighbors: usize = 0;
//     let mut tmp_indices_and_distances: [(usize, f32); MAX_NEIGHBORS] =
//         [(usize::MAX, 0.0); MAX_NEIGHBORS];

//     while ctx.candidates.len() > 0 {
//         // tmp_indices_and_distances = UnsafeCell::new([(usize::MAX, 0.0); MAX_NEIGHBORS]); // maybe not necessary

//         let c = ctx.candidates.pop().unwrap(); // remove closest element.
//         let mut f = *ctx.search_res.peek().unwrap();
//         if c.0.dist > f.dist {
//             break; // all elements in found are evaluated (see paper).
//         }
//         let c_entry = &entries[c.0.i ];

//         // compute the distances of all neighbors in parallel:

//         let tmp_indices_and_distances_ptr = tmp_indices_and_distances.as_mut_ptr() ; //  to get around the restriction of Send/Sync for ptrs.

//         // Note: checking with this, we see that in 99% of cases the MAX_NEIHGBORS is actually reached.
//         // std::io::stdout().write_fmt(format_args!(" {}\n", c_entry.neighbors.len()));
//         ctx.pool.scope(|s| {
//             let mut i: usize = 0;
//             for idx_and_dist in c_entry.neighbors.iter() {
//                 let idx_in_layer = idx_and_dist.i;
//                 let newly_visited = ctx.visited_idxs.insert(idx_in_layer);
//                 if newly_visited {
//                     s.spawn(move |_| {
//                         let i = i;
//                         let n_entry = &entries[idx_in_layer ];
//                         let n_data = data.get(n_entry.id );
//                         let dist = distance.distance(q_data, n_data);
//                         // write the distance back to the stack-allocated buffer:
//                         unsafe {
//                             let addr = (tmp_indices_and_distances_ptr as *mut (usize, f32)).add(i);
//                             addr.write((idx_in_layer, dist));
//                         };
//                     });
//                     i += 1;
//                 }
//             }
//             tmp_num_unvisited_neighbors = i;
//         });

//         for (idx_in_layer, dist_to_q) in &tmp_indices_and_distances[0..tmp_num_unvisited_neighbors]
//         {
//             let idx_in_layer = *idx_in_layer;
//             let dist = *dist_to_q;
//             f = *ctx.search_res.peek().unwrap();
//             if dist < f.dist || ctx.search_res.len() < ef {
//                 ctx.candidates.push(Reverse(DistAnd {
//                     i: idx_in_layer,
//                     dist,
//                 }));
//                 if ctx.search_res.len() < ef {
//                     ctx.search_res.push(DistAnd {
//                         i: idx_in_layer,
//                         dist,
//                     });
//                 } else {
//                     // compare dist to the currently furthest away,
//                     // if further than this dist, kick it out and insert the new one instead.
//                     if dist < f.dist {
//                         ctx.search_res.pop().unwrap();
//                         ctx.search_res.push(DistAnd {
//                             i: idx_in_layer,
//                             dist,
//                         });
//                     }
//                 }
//             }
//         }
//     }
// }

// #[cfg(feature = "tracking")]
// {
//     for e in out.found.iter() {
//         let to = layer.entries[e.idx_in_layer ].id;
//         let Some(from_idx) = track_to_idx_from_idx.get(&e.idx_in_layer) else {
//             continue;
//         };
//         let from = layer.entries[*from_idx ].id;
//         track!(EdgeHorizontal {
//             from,
//             to,
//             level: layer.level
//         })
//     }
// }